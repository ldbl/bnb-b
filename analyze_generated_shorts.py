#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ SHORT —Å–∏–≥–Ω–∞–ª–∏ - –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
import toml
from data_fetcher import BNBDataFetcher
from signal_generator import SignalGenerator
from weekly_tails import WeeklyTailsAnalyzer
from fibonacci import FibonacciAnalyzer
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def analyze_short_signals():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ SHORT —Å–∏–≥–Ω–∞–ª–∏"""

    print("üìä –ê–ù–ê–õ–ò–ó –ù–ê –ì–ï–ù–ï–†–ò–†–ê–ù–ò–¢–ï SHORT –°–ò–ì–ù–ê–õ–ò")
    print("=" * 50)

    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config_data = toml.load('config.toml')

        # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏
        data_fetcher = BNBDataFetcher()
        print("üìä –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏...")
        data = data_fetcher.fetch_bnb_data(300)

        if not data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        weekly_df = data['weekly']
        daily_df = data['daily']
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(daily_df)} –¥–Ω–µ–≤–Ω–∏ –∏ {len(weekly_df)} —Å–µ–¥–º–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∏—Ç–µ
        weekly_tails_analyzer = WeeklyTailsAnalyzer(config_data)
        fib_analyzer = FibonacciAnalyzer(config_data)
        signal_generator = SignalGenerator(config_data)

        # –°—ä–±–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏ –∑–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏—Ç–µ
        short_signals_data = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 30 —Å–µ–¥–º–∏—Ü–∏
        for i in range(max(10, len(weekly_df) - 30), len(weekly_df)):
            current_date = weekly_df.index[i]
            current_weekly = weekly_df.iloc[:i+1]
            current_daily = daily_df[daily_df.index <= current_date]

            if len(current_daily) < 50 or len(current_weekly) < 4:
                continue

            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ weekly tails
                tails_analysis = weekly_tails_analyzer.analyze_weekly_tails(current_weekly)

                # –¢—ä—Ä—Å–∏–º SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç–∏
                short_candidates = [t for t in tails_analysis if t.get('signal') == 'SHORT']

                if short_candidates:
                    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª
                    signal = signal_generator.generate_signal(current_daily, current_weekly)

                    if signal and signal.get('signal') == 'SHORT':
                        # –°—ä–±–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏ –∑–∞ SHORT —Å–∏–≥–Ω–∞–ª–∞
                        signal_data = {
                            'date': current_date.date(),
                            'price': float(current_weekly.iloc[-1]['Close']),
                            'confidence': signal.get('confidence', 0),
                            'tail_strength': short_candidates[0].get('tail_strength', 0),
                            'tail_price': float(short_candidates[0].get('Close', 0)),
                            'num_candidates': len(short_candidates)
                        }

                        # –î–æ–±–∞–≤—è–º–µ Fibonacci –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        fib_analysis = signal.get('fibonacci_analysis', {})
                        if fib_analysis:
                            signal_data['fib_signal'] = fib_analysis.get('fibonacci_signal', {}).get('signal', 'UNKNOWN')
                            signal_data['fib_strength'] = fib_analysis.get('fibonacci_signal', {}).get('strength', 0)

                        short_signals_data.append(signal_data)

            except Exception as e:
                print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å–µ–¥–º–∏—Ü–∞ {current_date.date()}: {e}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å—ä–±—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
        if short_signals_data:
            df = pd.DataFrame(short_signals_data)

            print("\n‚úÖ –ì–ï–ù–ï–†–ò–†–ê–ù–ò SHORT –°–ò–ì–ù–ê–õ–ò:")
            print(f"   üìä –û–±—â–æ SHORT —Å–∏–≥–Ω–∞–ª–∏: {len(df)}")
            print(f"   üìà –°—Ä–µ–¥–Ω–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç: {df['confidence'].mean():.2f}")
            print(f"   üïØÔ∏è –°—Ä–µ–¥–Ω–∞ —Å–∏–ª–∞ –Ω–∞ –æ–ø–∞—à–∫–∞—Ç–∞: {df['tail_strength'].mean():.2f}")
            print(f"   üí∞ –°—Ä–µ–¥–Ω–∞ —Ü–µ–Ω–∞: ${df['price'].mean():.2f}")

            print("\nüìã –ü–û–î–†–û–ë–ï–ù –ê–ù–ê–õ–ò–ó:")
            for _, row in df.iterrows():
                print(f"   üìÖ {row['date']}: SHORT @ ${row['price']:.2f} "
                      f"(—É–≤–µ—Ä–µ–Ω–æ—Å—Ç: {row['confidence']:.2f}, —Å–∏–ª–∞: {row['tail_strength']:.2f})")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò –ê–ù–ê–õ–ò–ó:")
            print(f"   üî¢ –ú–∏–Ω–∏–º–∞–ª–Ω–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç: {df['confidence'].min():.2f}")
            print(f"   üî¢ –ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç: {df['confidence'].max():.2f}")
            print(f"   üî¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {df['confidence'].std():.2f}")
            print(f"   üìà –ö–æ—Ä–µ–ª–∞—Ü–∏—è —Ü–µ–Ω–∞-—É–≤–µ—Ä–µ–Ω–æ—Å—Ç: {df['price'].corr(df['confidence']):.3f}")

            print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
            print("   ‚úÖ SHORT —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∏ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞ {len(df)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ SHORT —Å–∏–≥–Ω–∞–ª–∞")
            print("   ‚úÖ –°—Ä–µ–¥–Ω–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç > 4.0 –ø–æ–∫–∞–∑–≤–∞ —Å–∏–ª–Ω–∏ —Å–∏–≥–Ω–∞–ª–∏")
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ production –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ!")

        else:
            print("\n‚ùå –ù—è–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ SHORT —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑")

    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_short_signals()
