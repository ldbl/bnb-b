"""
Test System - –¢–µ—Å—Ç–≤–∞ —Ü—è–ª–∞—Ç–∞ BNB Trading —Å–∏—Å—Ç–µ–º–∞ —Å —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏
–ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∫–æ–≥–∞—Ç–æ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ Binance API –∏–ª–∏ –∏—Å–∫–∞—Ç–µ –¥–∞ —Ç–µ—Å—Ç–≤–∞—Ç–µ –ª–æ–≥–∏–∫–∞—Ç–∞
"""

import pandas as pd
import numpy as np
import toml
import logging
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤—è–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from fibonacci import FibonacciAnalyzer
from weekly_tails import WeeklyTailsAnalyzer
from indicators import TechnicalIndicators
from signal_generator import SignalGenerator
from validator import SignalValidator

# –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_test_data():
    """–°—ä–∑–¥–∞–≤–∞ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏ –∑–∞ BNB"""
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Å—Ç–æ–≤–∏ daily –¥–∞–Ω–Ω–∏ (—Å–∏–º—É–ª–∏—Ä–∞–º–µ BNB —Ü–µ–Ω–∞ –æ—Ç $600 –¥–æ $800)
    np.random.seed(42)  # –ó–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ 100 –¥–Ω–∏ –¥–∞–Ω–Ω–∏
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∏ BNB —Ü–µ–Ω–∏
    base_price = 650
    trend = np.linspace(0, 150, 100)  # –í—ä–∑—Ö–æ–¥—è—â —Ç—Ä–µ–Ω–¥
    noise = np.random.normal(0, 20, 100)  # –°–ª—É—á–∞–π–Ω–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è
    
    close_prices = base_price + trend + noise
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ OHLCV –¥–∞–Ω–Ω–∏
    daily_data = []
    for i, (date, close) in enumerate(zip(dates, close_prices)):
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∏ High, Low, Open
        volatility = np.random.uniform(0.01, 0.03)  # 1-3% –¥–Ω–µ–≤–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª–Ω–æ—Å—Ç
        
        high = close * (1 + np.random.uniform(0, volatility))
        low = close * (1 - np.random.uniform(0, volatility))
        open_price = np.random.uniform(low, high)
        
        # Volume
        volume = np.random.uniform(1000, 5000)
        
        daily_data.append({
            'Open': open_price,
            'High': high,
            'Low': low,
            'Close': close,
            'Volume': volume
        })
    
    daily_df = pd.DataFrame(daily_data, index=dates)
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Å—Ç–æ–≤–∏ weekly –¥–∞–Ω–Ω–∏ (20 —Å–µ–¥–º–∏—Ü–∏)
    weekly_dates = pd.date_range('2024-01-01', periods=20, freq='W')
    weekly_data = []
    
    for i, date in enumerate(weekly_dates):
        # –í–∑–∏–º–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞
        week_start = date
        week_end = date + timedelta(days=6)
        
        week_data = daily_df[week_start:week_end]
        
        if not week_data.empty:
            weekly_data.append({
                'Open': week_data.iloc[0]['Open'],
                'High': week_data['High'].max(),
                'Low': week_data['Low'].min(),
                'Close': week_data.iloc[-1]['Close'],
                'Volume': week_data['Volume'].sum()
            })
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ DataFrame —Å–∞–º–æ —Å –¥–∞–Ω–Ω–∏—Ç–µ, –∫–æ–∏—Ç–æ –∏–º–∞–º–µ
    weekly_df = pd.DataFrame(weekly_data)
    if not weekly_df.empty:
        weekly_df.index = weekly_dates[:len(weekly_df)]
    
    return daily_df, weekly_df

def test_individual_modules(config):
    """–¢–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª–Ω–∏—Ç–µ –º–æ–¥—É–ª–∏"""
    
    print("üß™ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –æ—Ç–¥–µ–ª–Ω–∏—Ç–µ –º–æ–¥—É–ª–∏...")
    
    # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏
    daily_df, weekly_df = create_test_data()
    
    print(f"üìä –°—ä–∑–¥–∞–¥–µ–Ω–∏ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏: Daily={len(daily_df)} —Ä–µ–¥–æ–≤–µ, Weekly={len(weekly_df)} —Ä–µ–¥–æ–≤–µ")
    
    # 1. –¢–µ—Å—Ç –Ω–∞ Fibonacci –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    print("\nüî¢ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Fibonacci –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    fib_analyzer = FibonacciAnalyzer(config)
    fib_analysis = fib_analyzer.analyze_fibonacci_trend(daily_df)
    
    if 'error' not in fib_analysis:
        print(f"   ‚úÖ Fibonacci –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
        print(f"   Swing High: ${fib_analysis['swing_high']:,.2f}")
        print(f"   Swing Low: ${fib_analysis['swing_low']:,.2f}")
        print(f"   Swing Size: {fib_analysis['swing_size']:.1%}")
        print(f"   –¢–µ–∫—É—â–∞ —Ü–µ–Ω–∞: ${fib_analysis['current_price']:,.2f}")
        print(f"   Fibonacci —Å–∏–≥–Ω–∞–ª: {fib_analysis['fibonacci_signal']['signal']}")
    else:
        print(f"   ‚ùå Fibonacci –∞–Ω–∞–ª–∏–∑ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {fib_analysis['error']}")
    
    # 2. –¢–µ—Å—Ç –Ω–∞ Weekly Tails –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    print("\nüìà –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Weekly Tails –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    tails_analyzer = WeeklyTailsAnalyzer(config)
    tails_analysis = tails_analyzer.analyze_weekly_tails_trend(weekly_df)
    
    if 'error' not in tails_analysis:
        print(f"   ‚úÖ Weekly Tails –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
        print(f"   –û–±—â–æ –æ–ø–∞—à–∫–∏: {tails_analysis['total_tails']}")
        print(f"   –°–∏–ª—å–Ω–∏ –æ–ø–∞—à–∫–∏: {tails_analysis['strong_tails']}")
        print(f"   Weekly Tails —Å–∏–≥–Ω–∞–ª: {tails_analysis['tails_signal']['signal']}")
    else:
        print(f"   ‚ùå Weekly Tails –∞–Ω–∞–ª–∏–∑ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {tails_analysis['error']}")
    
    # 3. –¢–µ—Å—Ç –Ω–∞ Technical Indicators
    print("\nüìä –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Technical Indicators...")
    indicators = TechnicalIndicators(config)
    daily_with_indicators = indicators.calculate_indicators(daily_df)
    indicators_signals = indicators.get_all_indicators_signals(daily_with_indicators)
    
    if 'error' not in indicators_signals:
        print(f"   ‚úÖ Technical Indicators —É—Å–ø–µ—à–Ω–∏")
        print(f"   RSI —Å–∏–≥–Ω–∞–ª: {indicators_signals['rsi']['signal']}")
        print(f"   MACD —Å–∏–≥–Ω–∞–ª: {indicators_signals['macd']['signal']}")
        print(f"   Bollinger —Å–∏–≥–Ω–∞–ª: {indicators_signals['bollinger']['signal']}")
    else:
        print(f"   ‚ùå Technical Indicators –Ω–µ—É—Å–ø–µ—à–Ω–∏: {indicators_signals['error']}")
    
    return daily_df, weekly_df, fib_analysis, tails_analysis, indicators_signals

def test_signal_generator(config, daily_df, weekly_df, fib_analysis, tails_analysis, indicators_signals):
    """–¢–µ—Å—Ç–≤–∞ Signal Generator –º–æ–¥—É–ª–∞"""
    
    print("\nüéØ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Signal Generator...")
    
    try:
        signal_gen = SignalGenerator(config)
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ mock –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
        mock_fib_analysis = fib_analysis if 'error' not in fib_analysis else None
        mock_tails_analysis = tails_analysis if 'error' not in tails_analysis else None
        mock_indicators_signals = indicators_signals if 'error' not in indicators_signals else None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª
        signal = signal_gen.generate_signal(daily_df, weekly_df)
        
        if 'error' not in signal:
            print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   –°–∏–≥–Ω–∞–ª: {signal['signal']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–æ—Å—Ç: {signal['confidence']:.2f}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {signal['priority']}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {signal['reason']}")
            print(f"   –ù–∏–≤–æ –Ω–∞ —Ä–∏—Å–∫–∞: {signal['risk_level']}")
        else:
            print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª: {signal['error']}")
        
        return signal
        
    except Exception as e:
        print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Signal Generator: {e}")
        return None

def test_validator(signal):
    """–¢–µ—Å—Ç–≤–∞ Signal Validator –º–æ–¥—É–ª–∞"""
    
    print("\n‚úÖ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Signal Validator...")
    
    try:
        validator = SignalValidator('test_results.csv')
        
        # –ó–∞–ø–∏—Å–≤–∞–º–µ —Å–∏–≥–Ω–∞–ª–∞
        success = validator.save_signal(signal)
        if success:
            print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ (—Å–∏–º—É–ª–∏—Ä–∞–º–µ —É—Å–ø–µ—à–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç)
        if signal and 'analysis_date' in signal:
            # –°–∏–º—É–ª–∏—Ä–∞–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–µ–¥ 14 –¥–Ω–∏
            current_price = signal.get('fibonacci_analysis', {}).get('current_price', 0) * 1.05  # +5%
            
            result = validator.check_signal_result(
                signal['analysis_date'],
                current_price,
                target_price=current_price
            )
            
            if 'error' not in result:
                print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª –≤–∞–ª–∏–¥–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   –†–µ–∑—É–ª—Ç–∞—Ç: {'–£–°–ü–ï–•' if result['success'] else '–ù–ï–£–°–ü–ï–•'}")
                print(f"   P&L: {result['profit_loss_pct']:+.2f}%")
            else:
                print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è: {result['error']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = validator.get_accuracy_stats(30)
        if 'error' not in stats:
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['overall_accuracy']:.1f}% —Ç–æ—á–Ω–æ—Å—Ç")
        
        # –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –æ–±–æ–±—â–µ–Ω–∏–µ
        validator.export_results_summary('test_summary.txt')
        print(f"   üìÑ –û–±–æ–±—â–µ–Ω–∏–µ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–æ –≤ test_summary.txt")
        
    except Exception as e:
        print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ Validator: {e}")

def run_full_test():
    """–ò–∑–ø—ä–ª–Ω—è–≤–∞ –ø—ä–ª–Ω–∏—è —Ç–µ—Å—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"""
    
    print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–∏—è —Ç–µ—Å—Ç –Ω–∞ BNB Trading —Å–∏—Å—Ç–µ–º–∞—Ç–∞...")
    print("="*80)
    
    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config = toml.load('config.toml')
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—Ä–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–≤–∞–º–µ –æ—Ç–¥–µ–ª–Ω–∏—Ç–µ –º–æ–¥—É–ª–∏
        daily_df, weekly_df, fib_analysis, tails_analysis, indicators_signals = test_individual_modules(config)
        
        # –¢–µ—Å—Ç–≤–∞–º–µ Signal Generator
        signal = test_signal_generator(config, daily_df, weekly_df, fib_analysis, tails_analysis, indicators_signals)
        
        # –¢–µ—Å—Ç–≤–∞–º–µ Validator
        if signal:
            test_validator(signal)
        
        print("\n" + "="*80)
        print("üéâ –ü–™–õ–ù–ò–Ø–¢ –¢–ï–°–¢ –ï –ó–ê–í–™–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("="*80)
        
        print("\nüìÅ –°—ä–∑–¥–∞–¥–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:")
        print("   - test_results.csv (—Ç–µ—Å—Ç–æ–≤–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏)")
        print("   - test_summary.txt (–æ–±–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏)")
        
        print("\nüîç –ó–∞ –¥–∞ —Ç–µ—Å—Ç–≤–∞—Ç–µ —Å —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏:")
        print("   1. –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –∏–º–∞—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞")
        print("   2. –°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ: python main.py")
        print("   3. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –ª–æ–≥ —Ñ–∞–π–ª–∞ bnb_trading.log")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ: {e}")
        print("–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –ø—Ä–∞–≤–∏–ª–Ω–∞")

if __name__ == "__main__":
    run_full_test()
