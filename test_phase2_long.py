#!/usr/bin/env python3
"""
Phase 2 LONG Signal Enhancements Test
–¢–µ—Å—Ç –∑–∞ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏—Ç–µ LONG –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from signal_generator import SignalGenerator
from data_fetcher import BNBDataFetcher
import toml
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging –∑–∞ –ø–æ-—á–∏—Å—Ç output
logging.getLogger('signal_generator').setLevel(logging.WARNING)
logging.getLogger('fibonacci').setLevel(logging.WARNING)
logging.getLogger('weekly_tails').setLevel(logging.WARNING)
logging.getLogger('trend_analyzer').setLevel(logging.WARNING)
logging.getLogger('data_fetcher').setLevel(logging.WARNING)

def test_phase2_long_enhancements():
    """Test Phase 2 LONG signal enhancements"""
    print("üß™ PHASE 2 LONG SIGNAL ENHANCEMENTS TEST")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏—Ç–µ
    data_fetcher = BNBDataFetcher('BNB/USDT')

    # –ó–∞—Ä–µ–∂–¥–∞–º–µ config
    with open('config.toml', 'r') as f:
        config = toml.load(f)

    signal_generator = SignalGenerator(config)

    try:
        print("üìä –í–∑–∏–º–∞–º–µ –¥–∞–Ω–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 90 –¥–Ω–∏)...")
        data = data_fetcher.fetch_bnb_data(90)

        if not data or 'daily' not in data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        daily_df = data['daily']
        weekly_df = data['weekly']

        print(f"‚úÖ –î–∞–Ω–Ω–∏ –∑–∞—Ä–µ–¥–µ–Ω–∏: {len(daily_df)} daily, {len(weekly_df)} weekly rows")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {daily_df.index[0].strftime('%Y-%m-%d')} –¥–æ {daily_df.index[-1].strftime('%Y-%m-%d')}")

        # –¢–µ—Å—Ç–≤–∞–º–µ —Å–∏–≥–Ω–∞–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        test_date = daily_df.index[-1]
        print(f"\nüéØ –¢–µ—Å—Ç–≤–∞–º–µ —Å–∏–≥–Ω–∞–ª –∑–∞ –¥–∞—Ç–∞: {test_date.strftime('%Y-%m-%d')}")

        # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª
        signal = signal_generator.generate_signal(daily_df, weekly_df)

        if signal and signal['signal'] != 'HOLD':
            print("\nüìä –†–ï–ó–£–õ–¢–ê–¢:")
            print(f"   –°–∏–≥–Ω–∞–ª: {signal['signal']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–æ—Å—Ç: {signal['confidence']:.2f}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {signal['reason']}")

            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ Phase 2 –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è
            if 'Phase 2' in signal['reason']:
                print("‚úÖ Phase 2 –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è: –ê–ö–¢–ò–í–ù–ò!")
                if 'Volume LONG' in signal['reason']:
                    print("   üí∞ Volume Confirmation: –ê–ö–¢–ò–í–ï–ù")
                if 'Divergence LONG' in signal['reason']:
                    print("   üîÑ Divergence Confirmation: –ê–ö–¢–ò–í–ï–ù")
                if 'Market Regime LONG' in signal['reason']:
                    print("   üìä Market Regime Awareness: –ê–ö–¢–ò–í–ï–ù")
            else:
                print("‚ö†Ô∏è Phase 2 –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è: –ù–ï–ê–ö–¢–ò–í–ù–ò (–º–æ–∂–µ –¥–∞ –Ω—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥–∞–Ω–Ω–∏)")

            # –ü–æ–∫–∞–∑–≤–∞–º–µ –¥–µ—Ç–∞–π–ª–∏
            if signal['signal'] == 'LONG':
                print("\nüéâ LONG —Å–∏–≥–Ω–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω!")
                print("   üí™ –¢–æ–≤–∞ –ø–æ–∫–∞–∑–≤–∞ —á–µ Phase 2 –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è—Ç–∞ —Ä–∞–±–æ—Ç—è—Ç!")
            else:
                print("\nüìâ SHORT —Å–∏–≥–Ω–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω!")
                print("   üí° –¢–æ–≤–∞ –µ –¥–æ–±—Ä–µ - SHORT —Å–∏–≥–Ω–∞–ª–∏ —Å—ä—â–æ —Å–∞ –≤–∞–∂–Ω–∏!")
        else:
            print("\nüìä –†–µ–∑—É–ª—Ç–∞—Ç: HOLD —Å–∏–≥–Ω–∞–ª")
            print("   üí≠ –ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ —Å–∏–ª–Ω–∏ —Å–∏–≥–Ω–∞–ª–∏ –≤ –º–æ–º–µ–Ω—Ç–∞")
        print("\n‚úÖ Phase 2 LONG Enhancements Test: –ó–ê–í–™–†–®–ï–ù!")

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–≤–∞–Ω–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_phase2_long_enhancements()
