#!/usr/bin/env python3
"""
Short Accuracy Validation Test
–¢–µ—Å—Ç –∑–∞ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ SHORT accuracy —Å–ª–µ–¥ –≤—Å–∏—á–∫–∏ Phase 1 –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backtester import Backtester
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging –∑–∞ –ø–æ-—á–∏—Å—Ç output
logging.getLogger('signal_generator').setLevel(logging.WARNING)
logging.getLogger('fibonacci').setLevel(logging.WARNING)
logging.getLogger('weekly_tails').setLevel(logging.WARNING)
logging.getLogger('trend_analyzer').setLevel(logging.WARNING)
logging.getLogger('data_fetcher').setLevel(logging.WARNING)

def test_short_accuracy():
    """Test SHORT accuracy after all Phase 1 improvements"""
    print('üß™ –§–ê–ó–ê 7: SHORT ACCURACY –í–ê–õ–ò–î–ê–¶–ò–Ø')
    print('=' * 40)
    print('üéØ –¶–ï–õ: SHORT accuracy > 60%')
    print('üî• –¢–µ—Å—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ 9 SHORT —Ñ–∏–ª—Ç—Ä–∏ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç')
    print()

    backtester = Backtester()

    try:
        print('üìä –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ FULL BACKTEST (18 –º–µ—Å–µ—Ü–∞)...')
        print('‚è≥ –¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ –Ω—è–∫–æ–ª–∫–æ –º–∏–Ω—É—Ç–∏...')

        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ full backtest
        results = backtester.run_backtest(18)

        if 'error' in results:
            print(f'‚ùå Backtest failed: {results["error"]}')
            return

        analysis = results['analysis']

        print('\nüìä BACKTEST –†–ï–ó–£–õ–¢–ê–¢–ò:')
        print('=' * 50)
        print(f'üìà –û–±—â–æ —Å–∏–≥–Ω–∞–ª–∏: {analysis["total_signals"]}')
        print(f'üèÜ –£—Å–ø–µ—à–Ω–∏ —Å–∏–≥–Ω–∞–ª–∏: {analysis["successful_signals"]}')
        print('.1f')
        print()

        print('üìä –ü–û –¢–ò–ü –°–ò–ì–ù–ê–õ:')
        print('.1f')
        print('.1f')
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ SHORT accuracy
        short_accuracy = analysis['short_signals']['accuracy']
        short_total = analysis['short_signals']['total']

        print('üéØ SHORT SIGNALS VALIDATION:')
        print('=' * 30)

        if short_total == 0:
            print('‚ö†Ô∏è  –ù–Ø–ú–ê SHORT —Å–∏–≥–Ω–∞–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏')
            print('   –¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ–∑–Ω–∞—á–∞–≤–∞ —á–µ —Ñ–∏–ª—Ç—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—è—Ç —Ç–≤—ä—Ä–¥–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ')
            print('   –∏–ª–∏ —á–µ –Ω—è–º–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏ SHORT –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥')
        else:
            print(f'üìä SHORT —Å–∏–≥–Ω–∞–ª–∏: {short_total}')
            print('.1f')

            if short_accuracy >= 60:
                print('üéâ –£–°–ü–ï–•! SHORT accuracy >= 60%')
                print('‚úÖ Phase 1 SHORT —Å–∏–≥–Ω–∞–ª–∏ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è - –í–ê–õ–ò–î–ò–†–ê–ù–ò!')
            elif short_accuracy >= 40:
                print('‚ö†Ô∏è  SHORT accuracy –µ –¥–æ–±—Ä–∞ (>= 40%) –Ω–æ –ø–æ–¥ —Ü–µ–ª—Ç–∞ 60%')
                print('   –ú–æ–∂–µ –¥–∞ —Å–µ –Ω—É–∂–¥–∞–µ –æ—Ç –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ —Ñ–∏–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
            else:
                print('‚ùå SHORT accuracy –µ –ø–æ–¥ –æ—á–∞–∫–≤–∞–Ω–∏—è—Ç–∞ (< 40%)')
                print('   –ù—É–∂–Ω–æ –µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ —Ç–µ—Å—Ç–≤–∞–Ω–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')

        print('\nüìã –î–û–¢–ê–ô–õ–ù–ò –†–ï–ó–£–õ–¢–ê–¢–ò:')
        print('.2f')
        if analysis['best_signals']:
            print('.2f')
        if analysis['worst_signals']:
            print('.2f')

        print('\nüìÅ –†–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ —Å–∞ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ –≤ data/backtest_results.txt')

        # –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        backtester.export_backtest_results(results)

        print('\n‚úÖ –§–ê–ó–ê 7: SHORT Accuracy –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ó–ê–í–™–†–®–ï–ù–ê')

        if short_total > 0 and short_accuracy >= 60:
            print('\nüéä –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø! PHASE 1 SHORT IMPROVEMENTS - –£–°–ü–ï–®–ù–ò!')
            print('üéØ SHORT accuracy target (60%+) - –ü–û–°–¢–ò–ì–ù–ê–¢!')
            print('üî• 9 SHORT quality filters - –í–ê–õ–ò–î–ò–†–ê–ù–ò!')
            print('üèÜ Phase 1 - –ó–ê–í–™–†–®–ï–ù!')
        elif short_total == 0:
            print('\n‚ö†Ô∏è  PHASE 1 SHORT IMPROVEMENTS - –¢–í–™–†–î–ï –ê–ì–†–ï–°–ò–í–ù–ò')
            print('   –ù—è–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ SHORT —Å–∏–≥–Ω–∞–ª–∏ - —Ñ–∏–ª—Ç—Ä–∏—Ç–µ –º–æ–∂–µ –¥–∞ —Å–∞ —Ç–≤—ä—Ä–¥–µ —Å—Ç—Ä–æ–≥–∏')
        else:
            print(f'\n‚ö†Ô∏è  PHASE 1 SHORT IMPROVEMENTS - –ù–£–ñ–î–ê –û–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø')
            print('.1f')

    except Exception as e:
        print(f'‚ùå SHORT Accuracy –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ì–†–ï–®–ö–ê: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_short_accuracy()
