#!/usr/bin/env python3
"""
üõ°Ô∏è Pre-deployment Validation Protocol - 7-Point Validation System
==================================================================

–¢–æ–∑–∏ –º–æ–¥—É–ª –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞ validation —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∏ deployment
–Ω–∞ –≤—Å—è–∫–∞ –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç –≤ BNB Trading System.

7-POINT VALIDATION CHECKLIST:
=============================
1. ‚úÖ LONG Accuracy Protection (100% must be maintained)
2. ‚úÖ P&L Stability Check (no regression allowed)
3. ‚úÖ Max Drawdown Control (cannot increase significantly)
4. ‚úÖ SHORT Signal Logic Validation (must make sense)
5. ‚úÖ Configuration Documentation (all parameters documented)
6. ‚úÖ Edge Cases Testing (missing data, extreme values)
7. ‚úÖ Performance Impact Assessment (speed and resource usage)

Author: Stanislav Nedelchev
Date: 2025-08-28
Version: 2.0
"""

import json
import logging
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

# Import our testing framework
from historical_tester import HistoricalTester, TestResult

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@dataclass
class ValidationPoint:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞ –µ–¥–∏–Ω validation point"""

    name: str
    description: str
    critical: bool  # –ê–∫–æ –µ True, failure –±–ª–æ–∫–∏—Ä–∞ deployment
    validator_func: callable
    expected_result: Any
    failure_message: str


@dataclass
class ValidationResult:
    """–†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Ü—è–ª–∞—Ç–∞ validation"""

    feature_name: str
    total_points: int
    passed_points: int
    failed_points: int
    critical_failures: int
    results: Dict[str, Dict[str, Any]]
    deployment_ready: bool
    summary: str


class ValidationProtocol:
    """
    7-Point Pre-deployment Validation Protocol

    –¢–∞–∑–∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Å–∏–≥—É—Ä—è–≤–∞ —á–µ –≤—Å—è–∫–∞ –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç:
    - –ù–µ –Ω–∞—Ä—É—à–∞–≤–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
    - –ü–æ–¥–æ–±—Ä—è–≤–∞ performance –∏–ª–∏ –ø–æ–Ω–µ –Ω–µ —è –≤–ª–æ—à–∞–≤–∞
    - –ï –¥–æ–±—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–∞–Ω–∞ –∏ —Ç–µ—Å—Ç–≤–∞–Ω–∞
    - –ï –≥–æ—Ç–æ–≤–∞ –∑–∞ production deployment
    """

    def __init__(self, config_path: str = "config.toml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ validation protocol

        Args:
            config_path: –ü—ä—Ç –¥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏—è —Ñ–∞–π–ª
        """
        self.config_path = config_path
        self.historical_tester = HistoricalTester(config_path)

        # Define the 7 validation points
        self.validation_points = self._define_validation_points()

        logger.info("üõ°Ô∏è Validation Protocol –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω —Å—ä—Å 7-point checklist")

    def _define_validation_points(self) -> List[ValidationPoint]:
        """–î–µ—Ñ–∏–Ω–∏—Ä–∞ 7-—Ç–µ validation —Ç–æ—á–∫–∏"""

        return [
            ValidationPoint(
                name="long_accuracy_protection",
                description="LONG —Å–∏–≥–Ω–∞–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –æ—Å—Ç–∞–Ω–µ 100%",
                critical=True,
                validator_func=self._validate_long_accuracy,
                expected_result=">= 100.0%",
                failure_message="LONG accuracy –ø–∞–¥–Ω–∞ –ø–æ–¥ –∫—Ä–∏—Ç–∏—á–Ω–∏—è –ø—Ä–∞–≥ –æ—Ç 100%",
            ),
            ValidationPoint(
                name="pnl_stability_check",
                description="P&L –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –≤–ª–æ—à–∞–≤–∞ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ",
                critical=True,
                validator_func=self._validate_pnl_stability,
                expected_result="No significant regression",
                failure_message="P&L –ø–æ–∫–∞–∑–≤–∞ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–∞ —Ä–µ–≥—Ä–µ—Å–∏—è",
            ),
            ValidationPoint(
                name="max_drawdown_control",
                description="Max drawdown –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ —É–≤–µ–ª–∏—á–∞–≤–∞ —Å >5%",
                critical=True,
                validator_func=self._validate_drawdown_control,
                expected_result="<= +5% increase",
                failure_message="Max drawdown —Å–µ –µ —É–≤–µ–ª–∏—á–∏–ª –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ",
            ),
            ValidationPoint(
                name="short_signal_logic",
                description="SHORT —Å–∏–≥–Ω–∞–ª–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞—Ç –ª–æ–≥–∏—á–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏",
                critical=False,
                validator_func=self._validate_short_signal_logic,
                expected_result="Logical signal distribution",
                failure_message="SHORT —Å–∏–≥–Ω–∞–ª–∏ –ø–æ–∫–∞–∑–≤–∞—Ç –Ω–µ–ª–æ–≥–∏—á–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
            ),
            ValidationPoint(
                name="configuration_documented",
                description="–í—Å–∏—á–∫–∏ –Ω–æ–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏",
                critical=True,
                validator_func=self._validate_configuration,
                expected_result="All parameters documented",
                failure_message="–ù–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏",
            ),
            ValidationPoint(
                name="edge_cases_tested",
                description="Edge cases —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ —Ç–µ—Å—Ç–≤–∞–Ω–∏",
                critical=False,
                validator_func=self._validate_edge_cases,
                expected_result="Edge cases handled",
                failure_message="Edge cases –Ω–µ —Å–∞ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ",
            ),
            ValidationPoint(
                name="performance_impact",
                description="Performance impact —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø—Ä–∏–µ–º–ª–∏–≤",
                critical=False,
                validator_func=self._validate_performance_impact,
                expected_result="Acceptable performance",
                failure_message="Performance impact –µ —Ç–≤—ä—Ä–¥–µ –≤–∏—Å–æ–∫",
            ),
        ]

    def validate_feature(
        self, feature_name: str, test_periods: Optional[List[str]] = None
    ) -> ValidationResult:
        """
        –ò–∑–ø—ä–ª–Ω—è–≤–∞ –ø—ä–ª–Ω–∞ 7-point validation –∑–∞ –¥–∞–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç

        Args:
            feature_name: –ò–º–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
            test_periods: –û–ø—Ü–∏–æ–Ω–∞–ª–Ω–∏ —Ç–µ—Å—Ç–æ–≤–∏ –ø–µ—Ä–∏–æ–¥–∏

        Returns:
            ValidationResult: –ü—ä–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞
        """
        logger.info(f"üõ°Ô∏è –ó–∞–ø–æ—á–≤–∞–º 7-point validation –∑–∞: {feature_name}")

        # Run historical testing first
        test_results = self.historical_tester.test_new_feature(feature_name, test_periods)

        # Initialize results
        validation_results = {}
        critical_failures = 0
        passed_points = 0
        failed_points = 0

        # Execute each validation point
        for validation_point in self.validation_points:
            try:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º: {validation_point.name}")

                result = validation_point.validator_func(
                    feature_name=feature_name,
                    test_results=test_results,
                    validation_point=validation_point,
                )

                validation_results[validation_point.name] = {
                    "passed": result["passed"],
                    "details": result.get("details", {}),
                    "message": result.get("message", ""),
                    "critical": validation_point.critical,
                }

                if result["passed"]:
                    passed_points += 1
                    logger.info(f"‚úÖ {validation_point.name}: PASSED")
                else:
                    failed_points += 1
                    if validation_point.critical:
                        critical_failures += 1
                    logger.error(
                        f"‚ùå {validation_point.name}: FAILED - {result.get('message', '')}"
                    )

            except Exception as e:
                logger.error(f"üí• –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ validation –Ω–∞ {validation_point.name}: {e}")
                validation_results[validation_point.name] = {
                    "passed": False,
                    "details": {},
                    "message": f"Validation error: {e}",
                    "critical": validation_point.critical,
                }
                failed_points += 1
                if validation_point.critical:
                    critical_failures += 1

        # Generate summary
        deployment_ready = critical_failures == 0
        summary = self._generate_validation_summary(
            feature_name,
            passed_points,
            failed_points,
            critical_failures,
            len(self.validation_points),
        )

        validation_result = ValidationResult(
            feature_name=feature_name,
            total_points=len(self.validation_points),
            passed_points=passed_points,
            failed_points=failed_points,
            critical_failures=critical_failures,
            results=validation_results,
            deployment_ready=deployment_ready,
            summary=summary,
        )

        logger.info(
            f"üõ°Ô∏è Validation –∑–∞–≤—ä—Ä—à–µ–Ω–∞: {passed_points}/{len(self.validation_points)} —Ç–æ—á–∫–∏ –º–∏–Ω–∞—Ç–∏"
        )
        if deployment_ready:
            logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ deployment!")
        else:
            logger.warning("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –ù–ï –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ deployment!")

        return validation_result

    def _validate_long_accuracy(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ LONG accuracy –µ –∑–∞–ø–∞–∑–µ–Ω–∞ (—Ç—Ä—è–±–≤–∞ –¥–∞ –µ >= 95%)
        """
        long_accuracies = []
        baseline_long_accuracy = self.historical_tester.baseline_metrics.long_accuracy

        for period_name, result in test_results.items():
            if result and hasattr(result, "long_accuracy"):
                long_accuracies.append(result.long_accuracy)

        if not long_accuracies:
            return {"passed": False, "message": "–ù—è–º–∞ LONG accuracy –¥–∞–Ω–Ω–∏ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"}

        avg_long_accuracy = sum(long_accuracies) / len(long_accuracies)
        min_long_accuracy = min(long_accuracies)

        # LONG accuracy —Ç—Ä—è–±–≤–∞ –¥–∞ –µ >= 100% (–ø–µ—Ä—Ñ–µ–∫—Ç–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç)
        passed = min_long_accuracy >= 100.0

        return {
            "passed": passed,
            "details": {
                "baseline_accuracy": baseline_long_accuracy,
                "avg_accuracy": avg_long_accuracy,
                "min_accuracy": min_long_accuracy,
                "all_accuracies": long_accuracies,
            },
            "message": f"LONG accuracy: {min_long_accuracy:.1f}% (min required: 100%)",
        }

    def _validate_pnl_stability(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ P&L –Ω–µ —Å–µ –µ –≤–ª–æ—à–∏–ª –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ
        """
        pnl_changes = []
        baseline_pnl = self.historical_tester.baseline_metrics.total_pnl

        for period_name, result in test_results.items():
            if result and hasattr(result, "baseline_comparison"):
                pnl_delta = result.baseline_comparison.get("pnl_delta", 0)
                pnl_changes.append(pnl_delta)

        if not pnl_changes:
            return {
                "passed": True,  # No data = assume stable
                "message": "–ù—è–º–∞ P&L –¥–∞–Ω–Ω–∏ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ",
            }

        avg_pnl_change = sum(pnl_changes) / len(pnl_changes)
        max_pnl_loss = min(pnl_changes)  # Most negative change

        # P&L –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –ø–∞–¥–Ω–µ —Å –ø–æ–≤–µ—á–µ –æ—Ç 15%
        pnl_loss_threshold = -15.0
        passed = max_pnl_loss >= pnl_loss_threshold

        return {
            "passed": passed,
            "details": {
                "baseline_pnl": baseline_pnl,
                "avg_pnl_change": avg_pnl_change,
                "max_pnl_loss": max_pnl_loss,
                "threshold": pnl_loss_threshold,
            },
            "message": f"P&L change: {avg_pnl_change:+.1f}% (max loss: {max_pnl_loss:+.1f}%)",
        }

    def _validate_drawdown_control(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ max drawdown –Ω–µ —Å–µ –µ —É–≤–µ–ª–∏—á–∏–ª –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ
        """
        drawdown_changes = []
        baseline_drawdown = self.historical_tester.baseline_metrics.max_drawdown

        for period_name, result in test_results.items():
            if result and hasattr(result, "baseline_comparison"):
                dd_delta = result.baseline_comparison.get("drawdown_delta", 0)
                drawdown_changes.append(dd_delta)

        if not drawdown_changes:
            return {"passed": True, "message": "–ù—è–º–∞ drawdown –¥–∞–Ω–Ω–∏ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"}

        avg_dd_change = sum(drawdown_changes) / len(drawdown_changes)
        max_dd_increase = max(drawdown_changes)

        # Max drawdown –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ —É–≤–µ–ª–∏—á–∏ —Å –ø–æ–≤–µ—á–µ –æ—Ç 5%
        dd_threshold = 5.0
        passed = max_dd_increase <= dd_threshold

        return {
            "passed": passed,
            "details": {
                "baseline_drawdown": baseline_drawdown,
                "avg_dd_change": avg_dd_change,
                "max_dd_increase": max_dd_increase,
                "threshold": dd_threshold,
            },
            "message": f"Drawdown change: {avg_dd_change:+.1f}% (max increase: {max_dd_increase:+.1f}%)",
        }

    def _validate_short_signal_logic(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ SHORT —Å–∏–≥–Ω–∞–ª–∏ –∏–º–∞—Ç –ª–æ–≥–∏—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        """
        total_short_signals = 0
        total_signals = 0
        short_accuracies = []

        for period_name, result in test_results.items():
            if result and hasattr(result, "short_signals") and hasattr(result, "total_signals"):
                total_short_signals += result.short_signals
                total_signals += result.total_signals
                if hasattr(result, "short_accuracy"):
                    short_accuracies.append(result.short_accuracy)

        if total_signals == 0:
            return {"passed": False, "message": "–ù—è–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑"}

        short_percentage = (total_short_signals / total_signals) * 100

        # SHORT —Å–∏–≥–Ω–∞–ª–∏ - –≥—ä–≤–∫–∞–≤–∞ –ª–æ–≥–∏–∫–∞ –±–∞–∑–∏—Ä–∞–Ω–æ –Ω–∞ –ø–∞–∑–∞—Ä–Ω–∏ —É—Å–ª–æ–≤–∏—è
        # –í —Å–∏–ª–µ–Ω bull market –µ –Ω–æ—Ä–º–∞–ª–Ω–æ –¥–∞ –Ω—è–º–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏
        # –í bear/correction –ø–µ—Ä–∏–æ–¥ SHORT —Å–∏–≥–Ω–∞–ª–∏—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∞ 10-40%

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª–∏—Ç–µ (Fix: Use separate variable to avoid corrupting total_signals)
        total_periods = len([r for r in test_results.values() if r and hasattr(r, "total_signals")])
        long_signals = sum(
            [r.long_signals for r in test_results.values() if r and hasattr(r, "long_signals")]
        )
        short_signals = sum(
            [r.short_signals for r in test_results.values() if r and hasattr(r, "short_signals")]
        )

        # –î–µ—Ñ–∏–Ω–∏—Ä–∞–º–µ reasonable_range –≤ –Ω–∞—á–∞–ª–æ—Ç–æ
        reasonable_range = (10, 40)

        if total_periods == 0:
            # –ù–∏–∫–∞–∫–≤–∏ —Å–∏–≥–Ω–∞–ª–∏ - –Ω–µ –º–æ–∂–µ–º –¥–∞ –æ—Ü–µ–Ω–∏–º
            passed = False
        elif short_signals == 0 and long_signals >= 10:
            # –ù—è–º–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏, –Ω–æ –∏–º–∞–º–µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ LONG - –ø—Ä–∏–µ–º–ª–∏–≤–æ –∑–∞ bull market
            passed = True
        elif short_signals > 0:
            # –ò–º–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏ - –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–∞ –≤ —Ä–∞–∑—É–º–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
            passed = reasonable_range[0] <= short_percentage <= reasonable_range[1]
        else:
            # –ú–∞–ª–∫–æ LONG —Å–∏–≥–Ω–∞–ª–∏ - –Ω–µ –º–æ–∂–µ–º –¥–∞ –æ—Ü–µ–Ω–∏–º SHORT –ª–æ–≥–∏–∫–∞—Ç–∞
            passed = True  # Assume good until we have more data

        return {
            "passed": passed,
            "details": {
                "total_signals": total_signals,  # Keep original accumulated total for metrics
                "total_periods": total_periods,  # Add periods count for clarity
                "short_signals": total_short_signals,
                "long_signals": long_signals,  # Include for completeness
                "short_percentage": short_percentage,
                "reasonable_range": reasonable_range,
                "short_accuracies": short_accuracies,
            },
            "message": f"SHORT signals: {short_percentage:.1f}% (expected: {reasonable_range[0]}-{reasonable_range[1]}%)",
        }

    def _validate_configuration(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –Ω–æ–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏
        """
        # –¢–æ–≤–∞ –µ –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª–Ω–æ—Å—Ç—Ç–∞ –±–∏ —Ç—Ä—è–±–≤–∞–ª–æ –¥–∞ —Å–µ —Å—Ä–∞–≤–Ω–∏
        # config —Ñ–∞–π–ª–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞

        # –ó–∞ —Å–µ–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –Ω–æ–≤–∏ —Å–µ–∫—Ü–∏–∏ –≤ config
        try:
            import toml

            config = toml.load(self.config_path)

            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ —Å–µ–∫—Ü–∏–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å testing
            required_sections = ["signals", "indicators", "fibonacci", "weekly_tails"]
            missing_sections = []

            for section in required_sections:
                if section not in config:
                    missing_sections.append(section)

            passed = len(missing_sections) == 0

            return {
                "passed": passed,
                "details": {
                    "available_sections": list(config.keys()),
                    "required_sections": required_sections,
                    "missing_sections": missing_sections,
                },
                "message": f"Configuration sections: {len(missing_sections)} missing",
            }

        except Exception as e:
            return {"passed": False, "message": f"Configuration validation error: {e}"}

    def _validate_edge_cases(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ edge cases —Å–∞ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –ø–µ—Ä–∏–æ–¥–∏
        tested_periods = list(test_results.keys())
        expected_periods = ["bull_market", "correction_phase", "recovery_phase", "recent_data"]

        missing_periods = [p for p in expected_periods if p not in tested_periods]
        failed_periods = [p for p, r in test_results.items() if r is None]

        # –£—Å–ø–µ—Ö –∞–∫–æ –∏–º–∞–º–µ –ø–æ–Ω–µ 1 —É—Å–ø–µ—à–µ–Ω –ø–µ—Ä–∏–æ–¥ —Å –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ —Å–∏–≥–Ω–∞–ª–∏
        # –∏–ª–∏ –ø–æ–Ω–µ 2 —É—Å–ø–µ—à–Ω–∏ –ø–µ—Ä–∏–æ–¥–∞ (–∑–∞ –ø–æ-–¥–æ–±—Ä–∞ coverage)
        successful_periods = len(tested_periods) - len(failed_periods) - len(missing_periods)

        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞–º–µ –ø–æ–Ω–µ –µ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ —Å —Å–∏–≥–Ω–∞–ª–∏ (–¥–æ—Ä–∏ 1 —Å–∏–≥–Ω–∞–ª –µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∑–∞ —Ç–µ—Å—Ç)
        has_signals = False
        for period_name, result in test_results.items():
            if result and hasattr(result, "total_signals") and result.total_signals > 0:
                has_signals = True
                break

        # –£—Å–ø–µ—Ö –∞–∫–æ –∏–º–∞–º–µ —Å–∏–≥–Ω–∞–ª–∏ –≤ –Ω—è–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø–æ–Ω–µ 1 —É—Å–ø–µ—à–µ–Ω –ø–µ—Ä–∏–æ–¥
        passed = has_signals or successful_periods >= 1

        return {
            "passed": passed,
            "details": {
                "tested_periods": tested_periods,
                "expected_periods": expected_periods,
                "missing_periods": missing_periods,
                "failed_periods": failed_periods,
                "successful_periods": successful_periods,
            },
            "message": f"Edge case testing: {successful_periods}/{len(expected_periods)} periods successful",
        }

    def _validate_performance_impact(
        self,
        feature_name: str,
        test_results: Dict[str, TestResult],
        validation_point: ValidationPoint,
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–≤–∞ performance impact
        """
        # –¢–æ–≤–∞ –µ –æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ performance
        # –í —Ä–µ–∞–ª–Ω–æ—Å—Ç—Ç–∞ –±–∏ —Ç—Ä—è–±–≤–∞–ª–æ –¥–∞ —Å–µ –∏–∑–º–µ—Ä–≤–∞ execution time

        total_signals = sum(result.total_signals for result in test_results.values() if result)

        # –ê–∫–æ –∏–º–∞–º–µ –ø–æ–Ω–µ –Ω—è–∫–∞–∫–≤–∏ —Å–∏–≥–Ω–∞–ª–∏, performance –µ OK (–∑–∞ development)
        reasonable_signal_count = total_signals > 0
        passed = reasonable_signal_count

        return {
            "passed": passed,
            "details": {"total_signals_generated": total_signals, "reasonable_threshold": 10},
            "message": f"Performance check: {total_signals} signals generated",
        }

    def _generate_validation_summary(
        self, feature_name: str, passed: int, failed: int, critical_failures: int, total: int
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–∞ summary –Ω–∞ validation —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        """
        success_rate = (passed / total) * 100 if total > 0 else 0

        lines = [
            f"üõ°Ô∏è VALIDATION SUMMARY: {feature_name}",
            "=" * 50,
            f"Total validation points: {total}",
            f"Passed: {passed}",
            f"Failed: {failed}",
            f"Critical failures: {critical_failures}",
            f"Success rate: {success_rate:.1f}%",
            "",
        ]

        if critical_failures == 0:
            lines.append("‚úÖ DEPLOYMENT APPROVED")
            lines.append("All critical validation points passed.")
        else:
            lines.append("‚ùå DEPLOYMENT REJECTED")
            lines.append(f"Critical failures detected: {critical_failures}")
            lines.append("Feature requires fixes before deployment.")

        return "\n".join(lines)

    def save_validation_report(
        self, validation_result: ValidationResult, output_file: str = "validation_report.txt"
    ):
        """
        –ó–∞–ø–∞–∑–≤–∞ –¥–µ—Ç–∞–π–ª–µ–Ω validation report

        Args:
            validation_result: –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞
            output_file: –ò–º–µ –Ω–∞ output —Ñ–∞–π–ª–∞
        """
        try:
            with open(output_file, "w", encoding="utf-8") as f:
                f.write(validation_result.summary)
                f.write("\n\n" + "=" * 50 + "\n")
                f.write("DETAILED RESULTS:\n")
                f.write("=" * 50 + "\n\n")

                for point_name, result in validation_result.results.items():
                    status = "‚úÖ PASSED" if result["passed"] else "‚ùå FAILED"
                    critical = " (CRITICAL)" if result.get("critical") else ""

                    f.write(f"{point_name}{critical}: {status}\n")
                    if result.get("message"):
                        f.write(f"  Message: {result['message']}\n")

                    if result.get("details"):
                        f.write("  Details:\n")
                        for key, value in result["details"].items():
                            f.write(f"    {key}: {value}\n")

                    f.write("\n")

            logger.info(f"üíæ Validation report –∑–∞–ø–∞–∑–µ–Ω –≤: {output_file}")

        except Exception as e:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ validation report: {e}")


# Utility functions
def quick_validation(feature_name: str, config_path: str = "config.toml") -> Dict[str, Any]:
    """
    –ë—ä—Ä–∑–∞ validation –∑–∞ development purposes

    Args:
        feature_name: –ò–º–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞
        config_path: –ü—ä—Ç –¥–æ config —Ñ–∞–π–ª–∞

    Returns:
        Quick validation results
    """
    protocol = ValidationProtocol(config_path)

    try:
        result = protocol.validate_feature(feature_name, ["recent_data"])

        return {
            "success": True,
            "deployment_ready": result.deployment_ready,
            "passed_points": result.passed_points,
            "critical_failures": result.critical_failures,
            "summary": result.summary,
        }

    except Exception as e:
        return {"success": False, "error": str(e)}


if __name__ == "__main__":
    # Example usage
    print("üõ°Ô∏è BNB Trading System - Validation Protocol")
    print("=" * 50)

    # Run quick validation
    print("\nüîç Running quick validation...")
    result = quick_validation("baseline_test")

    if result["success"]:
        print("‚úÖ Validation completed!")
        print(f"Deployment ready: {result['deployment_ready']}")
        print(f"Passed points: {result['passed_points']}/7")
        print(f"Critical failures: {result['critical_failures']}")
    else:
        print(f"‚ùå Validation failed: {result['error']}")

    print("\nüéØ Validation Protocol ready for production use!")
