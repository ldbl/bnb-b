#!/usr/bin/env python3
"""
Debug SHORT —Å–∏–≥–Ω–∞–ª–∏ - –¥–∏—Ä–µ–∫—Ç–µ–Ω —Ç–µ—Å—Ç –Ω–∞ weekly_tails –º–æ–¥—É–ª–∞
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
import toml
from data_fetcher import BNBDataFetcher
from weekly_tails import WeeklyTailsAnalyzer
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def debug_short_signals():
    """Debug SHORT —Å–∏–≥–Ω–∞–ª–∏"""

    print("üêõ DEBUG SHORT –°–ò–ì–ù–ê–õ–ò")
    print("=" * 50)

    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config_data = toml.load('config.toml')

        # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏
        data_fetcher = BNBDataFetcher()
        print("üìä –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏...")
        data = data_fetcher.fetch_bnb_data(200)  # 200 –¥–Ω–∏ –∏—Å—Ç–æ—Ä–∏—è

        if not data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        weekly_df = data['weekly']
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(weekly_df)} —Å–µ–¥–º–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ WeeklyTailsAnalyzer
        weekly_tails_analyzer = WeeklyTailsAnalyzer(config_data)

        print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ê –°–ï–î–ú–ò–ß–ù–ò –û–ü–ê–®–ö–ò...")
        print("   –¢—ä—Ä—Å–∏–º –≥–æ–ª–µ–º–∏ –≥–æ—Ä–Ω–∏ –æ–ø–∞—à–∫–∏ (SHORT –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª)")

        short_candidates = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –≤—Å—è–∫–∞ —Å–µ–¥–º–∏—Ü–∞
        for i in range(5, len(weekly_df)):  # –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç 5-—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
            current_weekly = weekly_df.iloc[:i+1]

            try:
                # –ü—ä—Ä–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –æ–ø–∞—à–∫–∏—Ç–µ (–≤—Ä—ä—â–∞ List[Dict])
                tails_analysis = weekly_tails_analyzer.analyze_weekly_tails(current_weekly)

                # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª –æ—Ç –∞–Ω–∞–ª–∏–∑–∞
                signal = weekly_tails_analyzer.get_weekly_tails_signal(tails_analysis)

                if signal and signal.get('signal') == 'SHORT':
                    signal_date = weekly_df.index[i]

                    # –í–∑–∏–º–∞–º–µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–µ–±—ä–≥
                    last_candle = current_weekly.iloc[-1]
                    upper_wick_pct = (last_candle['High'] - max(last_candle['Open'], last_candle['Close'])) / (last_candle['High'] - last_candle['Low']) * 100
                    lower_wick_pct = (min(last_candle['Open'], last_candle['Close']) - last_candle['Low']) / (last_candle['High'] - last_candle['Low']) * 100

                    short_candidates.append({
                        'date': signal_date.date(),
                        'confidence': signal['confidence'],
                        'price': last_candle['Close'],
                        'upper_wick_pct': upper_wick_pct,
                        'lower_wick_pct': lower_wick_pct,
                        'signal_strength': signal.get('strength', 'N/A'),
                        'tail_strength': signal.get('tail_strength', 'N/A')
                    })

            except Exception as e:
                continue

        print(f"\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò –û–¢ WEEKLY TAILS –ê–ù–ê–õ–ò–ó–ê:")
        print(f"   üî¥ SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç–∏: {len(short_candidates)}")

        if short_candidates:
            print("\nüî¥ –ü–û–î–†–û–ë–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ó–ê SHORT –ö–ê–ù–î–ò–î–ê–¢–ò:")
            print("   –î–∞—Ç–∞       | –¶–µ–Ω–∞     | –ì–æ—Ä–Ω–∞ –æ–ø–∞—à–∫–∞ | –î–æ–ª–Ω–∞ –æ–ø–∞—à–∫–∞ | –°–∏–ª–∞")
            print("   -----------|----------|--------------|--------------|-----")

            for candidate in short_candidates[:10]:  # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 10
                print("12")

            if len(short_candidates) > 10:
                print(f"   ... –∏ –æ—â–µ {len(short_candidates) - 10} SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç–∏")

            # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å–µ—Ü–∏
            print("\nüìÖ SHORT –ö–ê–ù–î–ò–î–ê–¢–ò –ü–û –ú–ï–°–ï–¶–ò:")
            monthly_candidates = {}
            for candidate in short_candidates:
                month_key = f"{candidate['date'].year}-{candidate['date'].month:02d}"
                monthly_candidates[month_key] = monthly_candidates.get(month_key, 0) + 1

            for month, count in sorted(monthly_candidates.items()):
                print(f"   {month}: {count} SHORT –∫–∞–Ω–¥–∏–¥–∞—Ç–∏")

        else:
            print("\n‚ùå –ù–Ø–ú–ê SHORT –ö–ê–ù–î–ò–î–ê–¢–ò –í –¢–û–ó–ò –ü–ï–†–ò–û–î!")
            print("   üí° –¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ–∑–Ω–∞—á–∞–≤–∞:")
            print("      - BNB –Ω—è–º–∞ SHORT –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–æ–∑–∏ –ø–µ—Ä–∏–æ–¥")
            print("      - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –∑–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏ —Å–∞ —Ç–≤—ä—Ä–¥–µ —Å—Ç—Ä–æ–≥–∏")
            print("      - –ò–º–∞ –ø—Ä–æ–±–ª–µ–º –≤ –ª–æ–≥–∏–∫–∞—Ç–∞ –Ω–∞ weekly_tails –º–æ–¥—É–ª–∞")

            # –ù–µ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω—è–∫–æ–∏ —Å–≤–µ—â–∏ —Ä—ä—á–Ω–æ
            print("\nüîç –†–™–ß–ï–ù –ê–ù–ê–õ–ò–ó –ù–ê –ù–Ø–ö–û–ò –°–í–ï–©–ò:")
            for i in [10, 20, 30, 40, 50]:
                if i < len(weekly_df):
                    candle = weekly_df.iloc[i]
                    upper_wick = candle['High'] - max(candle['Open'], candle['Close'])
                    lower_wick = min(candle['Open'], candle['Close']) - candle['Low']
                    total_range = candle['High'] - candle['Low']

                    if total_range > 0:
                        upper_wick_pct = upper_wick / total_range * 100
                        lower_wick_pct = lower_wick / total_range * 100

                        print(".1f")

    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_short_signals()
