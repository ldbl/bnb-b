{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(gh pr create:*)",
      "Bash(git commit:*)",
      "Bash(git reset:*)",
      "WebFetch(domain:github.com)",
      "Bash(git cherry-pick:*)",
      "Bash(git merge:*)",
      "Bash(grep:*)",
      "Bash(git rm:*)",
      "WebSearch",
      "Bash(flake8:*)",
      "Bash(source:*)",
      "Bash(pip install flake8 black isort)",
      "Bash(pip install:*)",
      "Bash(autoflake:*)",
      "Bash(black:*)",
      "Bash(isort:*)",
      "Bash(autopep8:*)",
      "Bash(python:*)",
      "Bash(pip3 install:*)",
      "Bash(~/.local/bin/mypy src/bnb_trading/weekly_tails.py --no-error-summary)",
      "Bash(~/.local/bin/mypy src/bnb_trading/indicators.py --no-error-summary)",
      "Bash(~/.local/bin/mypy src/bnb_trading/fibonacci.py --no-error-summary)",
      "Bash(ruff check:*)",
      "Bash(timeout:*)",
      "Bash(find:*)",
      "Bash(cat:*)",
      "Bash(pre-commit run:*)",
      "Bash(mypy:*)",
      "Bash(pre-commit:*)",
      "Bash(PYTHONPATH=src python3:*)",
      "Bash(make pytest:*)",
      "Bash(make:*)",
      "Bash(git pull:*)",
      "Bash(gh run list:*)",
      "Bash(mkdir:*)",
      "Bash(git stash:*)",
      "Bash(ls:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(ruff:*)",
      "Bash(ruff format:*)",
      "Bash(pytest:*)",
      "Bash(git status:*)",
      "Bash(git log:*)",
      "Bash(git diff:*)",
      "Bash(gh pr:*)",
      "Bash(gh:*)",
      "Bash(sed:*)",
      "Bash(PYTHONPATH=src python -m pytest tests/ -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/ -v --tb=short)",
      "Bash(PYTHONPATH=src python -m pytest tests/ --cov=bnb_trading --cov-report=term-missing)",
      "Bash(PYTHONPATH=src python -m pytest -v --collect-only)",
      "Bash(PYTHONPATH=src python -m pytest tests/analysis/test_fibonacci.py -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/signals/test_decision.py -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/signals/test_decision.py::test_decide_long_health_gate_failure -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/signals/test_decision.py::test_decide_long_critical_modules_config -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/signals/test_decision.py::test_load_critical_modules_validation -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/test_decision_regression.py -v)",
      "Bash(PYTHONPATH=src python -m pytest tests/test_*.py -v --tb=short)",
      "Bash(PYTHONPATH=src python -c \"\nimport sys\nsys.path.append(''src'')\n\nfrom bnb_trading.signals.decision import decide_long\nfrom bnb_trading.core.models import DecisionContext, ModuleResult\nimport pandas as pd\nfrom unittest.mock import patch\n\n# Create test context\ndates = pd.date_range(''2024-01-01'', periods=100, freq=''D'')\ndaily_df = pd.DataFrame({\n    ''Open'': [500.0] * 100,\n    ''High'': [510.0] * 100, \n    ''Low'': [490.0] * 100,\n    ''Close'': [505.0] * 100,\n    ''Volume'': [1000000] * 100,\n}, index=dates)\n\nweekly_dates = pd.date_range(''2024-01-01'', periods=15, freq=''W'')\nweekly_df = pd.DataFrame({\n    ''Open'': [500.0] * 15,\n    ''High'': [520.0] * 15,\n    ''Low'': [480.0] * 15, \n    ''Close'': [505.0] * 15,\n    ''Volume'': [5000000] * 15,\n}, index=weekly_dates)\n\nconfig = {\n    ''signals'': {\n        ''weights'': {''weekly_tails'': 0.60, ''fibonacci'': 0.20, ''trend'': 0.10, ''moving_avg'': 0.10},\n        ''thresholds'': {''confidence_min'': 0.85},\n    },\n}\n\ncontext = DecisionContext(\n    closed_daily_df=daily_df,\n    closed_weekly_df=weekly_df,\n    config=config,\n    timestamp=dates[-1],\n)\n\n# Test strong LONG scenario\nwith patch(''bnb_trading.signals.decision.WeeklyTailsAnalyzer'') as mock_tails, \\\n     patch(''bnb_trading.signals.decision.PatternTrendAnalyzer'') as mock_trend, \\\n     patch(''bnb_trading.signals.decision.FibonacciAnalyzer'') as mock_fib, \\\n     patch(''bnb_trading.signals.decision.MovingAveragesAnalyzer'') as mock_ma:\n    \n    mock_tails.return_value.analyze.return_value = ModuleResult(\n        status=''OK'', state=''LONG'', score=1.0, contrib=0.60, reason=''Strong weekly tail''\n    )\n    mock_trend.return_value.analyze.return_value = ModuleResult(\n        status=''OK'', state=''UP'', score=0.8, contrib=0.08, reason=''Strong trend''  \n    )\n    mock_fib.return_value.analyze.return_value = ModuleResult(\n        status=''OK'', state=''HOLD'', score=0.7, contrib=0.14, reason=''Good level''\n    )\n    mock_ma.return_value.analyze_with_module_result.return_value = ModuleResult(\n        status=''OK'', state=''UP'', score=0.9, contrib=0.09, reason=''Above MA''\n    )\n    \n    result = decide_long(context)\n    \n    print(''âœ… 21/21 LONG ACCURACY REGRESSION TEST:'')\n    print(f''   Signal: {result.signal}'')\n    print(f''   Confidence: {result.confidence:.3f}'')\n    print(f''   Passed: {result.signal == \"\"LONG\"\" and result.confidence >= 0.85}'')\n\")"
    ],
    "deny": [],
    "ask": []
  }
}
