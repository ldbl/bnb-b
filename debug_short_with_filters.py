#!/usr/bin/env python3
"""
Debug SHORT —Å–∏–≥–Ω–∞–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–∏ —Ñ–∏–ª—Ç—Ä–∏ - –¥–∞ –≤–∏–¥–∏–º –∫—ä–¥–µ —Å–µ –±–ª–æ–∫–∏—Ä–∞—Ç
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
import toml
from data_fetcher import BNBDataFetcher
from signal_generator import SignalGenerator
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def debug_short_with_filters():
    """Debug SHORT —Å–∏–≥–Ω–∞–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–∏ —Ñ–∏–ª—Ç—Ä–∏"""

    print("üêõ DEBUG SHORT –°–ò–ì–ù–ê–õ–ò –° –§–ò–õ–¢–†–ò")
    print("=" * 60)

    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config_data = toml.load('config.toml')

        # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏
        data_fetcher = BNBDataFetcher()
        print("üìä –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏...")
        data = data_fetcher.fetch_bnb_data(200)  # 200 –¥–Ω–∏ –∏—Å—Ç–æ—Ä–∏—è

        if not data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        weekly_df = data['weekly']
        daily_df = data['daily']
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(daily_df)} –¥–Ω–µ–≤–Ω–∏ –∏ {len(weekly_df)} —Å–µ–¥–º–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ SignalGenerator
        signal_generator = SignalGenerator(config_data)

        print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ê SHORT –°–ò–ì–ù–ê–õ–ò –° –§–ò–õ–¢–†–ò...")
        print("   –©–µ —Å–ª–µ–¥–∏–º –∫—ä–¥–µ —Å–µ –±–ª–æ–∫–∏—Ä–∞—Ç SHORT —Å–∏–≥–Ω–∞–ª–∏—Ç–µ")

        short_attempts = []
        short_blocked_by_trend = 0
        short_blocked_by_fib = 0
        short_blocked_by_other = 0

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 20 —Å–µ–¥–º–∏—Ü–∏
        for i in range(max(10, len(weekly_df) - 20), len(weekly_df)):
            current_date = weekly_df.index[i]
            current_weekly = weekly_df.iloc[:i+1]
            current_daily = daily_df[daily_df.index <= current_date]

            if len(current_daily) < 50 or len(current_weekly) < 4:
                continue

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª
                signal = signal_generator.generate_signal(current_daily, current_weekly)

                if signal and signal.get('signal') != 'HOLD':
                    signal_type = signal.get('signal')

                    # –ê–∫–æ –µ SHORT, –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–º–µ –∫–∞–∫–≤–æ —Å–µ –µ —Å–ª—É—á–∏–ª–æ
                    if signal_type == 'SHORT':
                        short_info = {
                            'date': current_date.date(),
                            'signal': signal_type,
                            'confidence': signal.get('confidence', 0),
                            'price': current_daily['Close'].iloc[-1] if not current_daily.empty else 0,
                            'fibonacci_analysis': signal.get('fibonacci_analysis', {}),
                            'weekly_tails_analysis': signal.get('weekly_tails_analysis', {}),
                            'trend_analysis': signal.get('trend_analysis', {}),
                            'indicators_signals': signal.get('indicators_signals', {}),
                            'reasons': signal.get('reasons', [])
                        }
                        short_attempts.append(short_info)
                        print(f"üî¥ SHORT —Å–∏–≥–Ω–∞–ª –Ω–∞ {current_date.date()}: —É–≤–µ—Ä–µ–Ω–æ—Å—Ç {signal.get('confidence', 0):.2f}")

                    elif signal_type == 'LONG':
                        print(f"üü¢ LONG —Å–∏–≥–Ω–∞–ª –Ω–∞ {current_date.date()}: —É–≤–µ—Ä–µ–Ω–æ—Å—Ç {signal.get('confidence', 0):.2f}")

            except Exception as e:
                continue

        print(f"\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò:")
        print(f"   üî¥ SHORT –æ–ø–∏—Ç–∏: {len(short_attempts)}")
        print(f"   üü¢ LONG —Å–∏–≥–Ω–∞–ª–∏: –±—è—Ö–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ (–Ω–µ –±—Ä–æ–∏–º)")
        print(f"   ‚ùå SHORT –±–ª–æ–∫–∏—Ä–∞–Ω–∏ –æ—Ç —Ç—Ä–µ–Ω–¥: {short_blocked_by_trend}")
        print(f"   ‚ùå SHORT –±–ª–æ–∫–∏—Ä–∞–Ω–∏ –æ—Ç Fibonacci: {short_blocked_by_fib}")
        print(f"   ‚ùå SHORT –±–ª–æ–∫–∏—Ä–∞–Ω–∏ –æ—Ç –¥—Ä—É–≥–∏: {short_blocked_by_other}")

        if short_attempts:
            print("\nüî¥ SHORT –°–ò–ì–ù–ê–õ–ò - –î–ï–¢–ê–ô–õ–ò:")
            for i, short in enumerate(short_attempts[:5], 1):
                print(f"\n{i}. –î–∞—Ç–∞: {short['date']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–æ—Å—Ç: {short['confidence']:.2f}")
                print(f"   –¶–µ–Ω–∞: ${short['price']:.2f}")
                print(f"   –ü—Ä–∏—á–∏–Ω–∏: {', '.join(short['reasons'][:3])}")  # –ü—ä—Ä–≤–∏—Ç–µ 3 –ø—Ä–∏—á–∏–Ω–∏

                # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ç—Ä–µ–Ω–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
                trend_analysis = short['trend_analysis']
                if trend_analysis:
                    combined_trend = trend_analysis.get('combined_trend', {})
                    daily_trend = trend_analysis.get('daily_trend', {})
                    trend_direction = combined_trend.get('direction', 'UNKNOWN')
                    daily_direction = daily_trend.get('direction', 'UNKNOWN')
                    daily_strength = daily_trend.get('strength', 'UNKNOWN')

                    print(f"   üìà –¢—Ä–µ–Ω–¥: Combined={trend_direction}, Daily={daily_direction} ({daily_strength})")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ weekly tails –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
                tails_analysis = short['weekly_tails_analysis']
                if tails_analysis and tails_analysis.get('tails_signal'):
                    tails_signal = tails_analysis['tails_signal']
                    print(f"   üïØÔ∏è Weekly Tails: {tails_signal.get('signal', 'UNKNOWN')} (—Å–∏–ª–∞: {tails_signal.get('strength', 0):.2f})")

        else:
            print("\n‚ùå –ù–Ø–ú–ê SHORT –°–ò–ì–ù–ê–õ–ò –í –¢–û–ó–ò –ü–ï–†–ò–û–î!")
            print("\nüí° –í–™–ó–ú–û–ñ–ù–ò –ü–†–ò–ß–ò–ù–ò:")
            print("   1. üéØ –¢–†–ï–ù–î –§–ò–õ–¢–™–†: BNB –µ –≤ —Å–∏–ª–µ–Ω bull run - SHORT —Å–µ –±–ª–æ–∫–∏—Ä–∞ –ø—Ä–∏ —Å–∏–ª–Ω–∏ uptrends")
            print("   2. üîç WEEKLY TAILS: –ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ —Å–∏–ª–Ω–∏ –≥–æ—Ä–Ω–∏ –æ–ø–∞—à–∫–∏ –∑–∞ SHORT")
            print("   3. üéõÔ∏è –§–ò–ë–û–ù–ê–ß–ò –§–ò–õ–¢–™–†: SHORT —Å–µ –ø–æ–∑–≤–æ–ª—è–≤–∞ —Å–∞–º–æ –Ω–∞ resistance –Ω–∏–≤–∞")
            print("   4. ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø: SHORT –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞ —Å–∞ —Ç–≤—ä—Ä–¥–µ —Å—Ç—Ä–æ–≥–∏")

            # –ù–µ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–≤–æ –ø–æ–∫–∞–∑–≤–∞ —Ç—Ä–µ–Ω–¥ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ä—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –¥–∞—Ç–∞
            print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ê –¢–†–ï–ù–î–ê –ó–ê –ü–û–°–õ–ï–î–ù–ê–¢–ê –î–ê–¢–ê:")
            last_date = weekly_df.index[-1]
            last_daily = daily_df[daily_df.index <= last_date]
            last_weekly = weekly_df

            if len(last_daily) >= 50 and len(last_weekly) >= 4:
                try:
                    signal = signal_generator.generate_signal(last_daily, last_weekly)
                    trend_analysis = signal.get('trend_analysis', {})

                    if trend_analysis:
                        combined_trend = trend_analysis.get('combined_trend', {})
                        daily_trend = trend_analysis.get('daily_trend', {})
                        weekly_trend = trend_analysis.get('weekly_trend', {})

                        print(f"   üìä Combined trend: {combined_trend.get('direction', 'UNKNOWN')} (—Å–∏–ª–∞: {combined_trend.get('strength', 'UNKNOWN')})")
                        print(f"   üìä Daily trend: {daily_trend.get('direction', 'UNKNOWN')} (—Å–∏–ª–∞: {daily_trend.get('strength', 'UNKNOWN')})")
                        print(f"   üìä Weekly trend: {weekly_trend.get('direction', 'UNKNOWN')} (—Å–∏–ª–∞: {weekly_trend.get('strength', 'UNKNOWN')})")

                        trend_direction = combined_trend.get('direction', 'UNKNOWN')
                        daily_direction = daily_trend.get('direction', 'UNKNOWN')

                        if trend_direction in ['UPTREND', 'STRONG_UPTREND'] or daily_direction == 'UPTREND':
                            print(f"   üö´ SHORT –µ –±–ª–æ–∫–∏—Ä–∞–Ω! –¢—Ä–µ–Ω–¥—ä—Ç –µ —Ç–≤—ä—Ä–¥–µ —Å–∏–ª–µ–Ω –≤—ä–∑—Ö–æ–¥—è—â")

                except Exception as e:
                    print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")

    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_short_with_filters()
