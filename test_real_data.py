#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞ weekly_tails.py —Å —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç Binance
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
from data_fetcher import BNBDataFetcher
from weekly_tails import WeeklyTailsAnalyzer
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def test_real_data():
    """–¢–µ—Å—Ç–≤–∞ weekly_tails.py —Å —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏"""

    print("üîß –¢–ï–°–¢ –° –†–ï–ê–õ–ù–ò –î–ê–ù–ù–ò –û–¢ BINANCE")
    print("=" * 50)

    try:
        # –ò–∑–≤–ª–∏—á–∞–º–µ —Ä–µ–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏
        data_fetcher = BNBDataFetcher()
        print("üìä –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏...")
        data = data_fetcher.fetch_bnb_data(90)  # 90 –¥–Ω–∏

        if not data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        weekly_df = data['weekly']
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(weekly_df)} —Å–µ–¥–º–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∞")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(weekly_df.columns)}")

        # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 —Å–µ–¥–º–∏—Ü–∏
        print("\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 —Å–µ–¥–º–∏—Ü–∏:")
        for i, (date, row) in enumerate(weekly_df.tail(3).iterrows()):
            open_price = row['Open']
            high_price = row['High']
            low_price = row['Low']
            close_price = row['Close']
            is_bullish = close_price > open_price
            upper_wick = high_price - max(open_price, close_price)
            lower_wick = min(open_price, close_price) - low_price
            total_range = high_price - low_price

            upper_wick_pct = (upper_wick / total_range * 100) if total_range > 0 else 0

            print(".2f"
                  ".2f")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        config = {
            'weekly_tails': {
                'lookback_weeks': 8,
                'min_tail_size': 0.03,
                'strong_tail_size': 0.05,
                'confluence_bonus': 1.5
            }
        }

        analyzer = WeeklyTailsAnalyzer(config)
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç–≤–∞–º–µ –∞–Ω–∞–ª–∏–∑
        print("\nüéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏ –æ–ø–∞—à–∫–∏...")
        tails_analysis = analyzer.analyze_weekly_tails(weekly_df)
        print(f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –æ–ø–∞—à–∫–∏: {len(tails_analysis)}")

        for i, tail in enumerate(tails_analysis[-3:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3
            print(f"  {i+1}. {tail['date'].date()}: {tail['dominant_tail']} –æ–ø–∞—à–∫–∞ ({tail['tail_strength']:.1%}) - {tail['signal']}")

        # –¢–µ—Å—Ç–≤–∞–º–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª
        if tails_analysis:
            print("\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª...")
            signal = analyzer.get_weekly_tails_signal(tails_analysis)
            print(f"üéØ –ì–ï–ù–ï–†–ò–†–ê–ù –°–ò–ì–ù–ê–õ: {signal.get('signal', 'ERROR')} (—Å–∏–ª–∞: {signal.get('strength', 0):.2f})")
            print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {signal.get('reason', 'ERROR')}")
        else:
            print("‚ùå –ù—è–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –æ–ø–∞—à–∫–∏")

    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_real_data()
