name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, pr*-* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.7'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # TA-Lib now has binary wheels (Aug 2025) - no compilation needed!
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Lint and format check with Ruff
      run: |
        # Verify Ruff config is loaded properly
        ruff --version
        ruff check src/ --output-format=github
        ruff format --check src/

    - name: Type check with mypy (gradual)
      run: |
        # Use same relaxed mypy config as pre-commit hooks
        python -m mypy src/ --config-file=pyproject.toml

    - name: üö® CRITICAL - Golden 21/21 Regression Test
      run: |
        echo "Running critical regression test to verify 21/21 signals maintained..."
        pytest tests/test_golden_regression.py -v --tb=short
      env:
        PYTHONPATH: src

    - name: üîç Debug file structure before backtest
      run: |
        echo "=== Debugging CI file structure ==="
        echo "Current working directory:"
        pwd
        echo ""
        echo "Root directory contents:"
        ls -la
        echo ""
        echo "src/ directory contents:"
        ls -la src/ || echo "src/ not found"
        echo ""
        echo "src/bnb_trading/ contents:"
        ls -la src/bnb_trading/ || echo "src/bnb_trading/ not found"
        echo ""
        echo "src/bnb_trading/data/ contents:"
        ls -la src/bnb_trading/data/ || echo "src/bnb_trading/data/ not found"
        echo ""
        echo "Looking for fetcher.py specifically:"
        find . -name "fetcher.py" -type f || echo "No fetcher.py found"
        echo ""
        echo "Python path verification:"
        python3 -c "import sys; print('sys.path:', sys.path)"
        echo ""
        echo "PYTHONPATH env var:"
        echo "PYTHONPATH: $PYTHONPATH"

    - name: üìä Validate make backtest consistency
      run: |
        echo "Testing make backtest command for CI/local consistency..."
        echo "This should produce identical results to local execution..."
        make backtest
      env:
        PYTHONPATH: src

    - name: Security check with bandit
      run: |
        bandit -r src/ -f json
      continue-on-error: true  # Allow security warnings for now

    - name: Test with pytest
      run: |
        # Run full test suite
        pytest tests/ --tb=short --cov=src/bnb_trading --cov-report=term-missing --cov-fail-under=10
      env:
        PYTHONPATH: src
      continue-on-error: true  # Don't block on test failures during transition

    # Codecov upload disabled - no API key configured
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     file: ./coverage.xml
    #     flags: unittests
    #     name: codecov-umbrella
    #     fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.7'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # TA-Lib now has binary wheels (Aug 2025) - no compilation needed!
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run integration tests
      run: |
        echo "Integration tests temporarily disabled - clean testing approach in development"
        # pytest tests/ -v -m "integration" --tb=short
      env:
        PYTHONPATH: src

  release:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.7'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    #   run: |
    #     python -m twine upload dist/*
