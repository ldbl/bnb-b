#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ SHORT —Å–∏–≥–Ω–∞–ª–∏
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
import toml
from tqdm import tqdm
from data_fetcher import BNBDataFetcher
from signal_generator import SignalGenerator
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def analyze_historical_shorts():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ SHORT —Å–∏–≥–Ω–∞–ª–∏"""

    print("üìä –ê–ù–ê–õ–ò–ó –ù–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò SHORT –°–ò–ì–ù–ê–õ–ò")
    print("=" * 60)

    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        config_data = toml.load('config.toml')

        # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏ - –ø–æ-–¥—ä–ª—ä–≥ –ø–µ—Ä–∏–æ–¥
        data_fetcher = BNBDataFetcher()
        print("üìä –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏...")
        data = data_fetcher.fetch_bnb_data(500)  # 500 –¥–Ω–∏ –∏—Å—Ç–æ—Ä–∏—è

        if not data or 'daily' not in data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        daily_df = data['daily']
        weekly_df = data['weekly']

        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(daily_df)} –¥–Ω–µ–≤–Ω–∏ –∑–∞–ø–∏—Å–∞")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {daily_df.index[0].date()} –¥–æ {daily_df.index[-1].date()}")

        # –†–ï–õ–ê–ö–°–ò–†–ê–ù–ò SHORT –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò –ê–ù–ê–õ–ò–ó
        print("üîß –ò–ó–ü–û–õ–ó–í–ê–ú–ï –†–ï–õ–ê–ö–°–ò–†–ê–ù–ò SHORT –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê –¢–ï–°–¢:")
        print("   - min_short_score: 25 (–≤–º–µ—Å—Ç–æ 90)")
        print("   - confidence_threshold: 0.6 (–≤–º–µ—Å—Ç–æ 0.8)")
        print("   - –î–µ–∑–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∏ HTTP –º–æ–¥—É–ª–∏ –∑–∞ –±—ä—Ä–∑–∏–Ω–∞")

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–º–µ SHORT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ –¥–∞ —Å–∞ –ø–æ-—Ä–µ–ª–∞–∫—Å–∏—Ä–∞–Ω–∏
        config_data['signal_scoring'] = {
            'min_short_score': 25,  # –ù–∞–º–∞–ª—è–≤–∞–º–µ –æ—Ç 90 –Ω–∞ 25
            'confidence_threshold': 0.6  # –ù–∞–º–∞–ª—è–≤–∞–º–µ –æ—Ç 0.8 –Ω–∞ 0.6
        }

        # –î–µ–∑–∞–∫—Ç–∏–≤–∏—Ä–∞–º–µ HTTP –º–æ–¥—É–ª–∏ –∑–∞ –±—ä—Ä–∑–∏–Ω–∞
        config_data['sentiment'] = {'enabled': False}
        config_data['whale_tracker'] = {'enabled': False}
        config_data['ichimoku'] = {'enabled': False}

        signal_generator = SignalGenerator(config_data)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª–∏ –∑–∞ —Ü–µ–ª–∏—è –ø–µ—Ä–∏–æ–¥
        short_signals = []
        long_signals = []

        print("\nüîç –ì–ï–ù–ï–†–ò–†–ê–ù–ï –ù–ê –°–ò–ì–ù–ê–õ–ò –ó–ê –¶–ï–õ–ò–Ø –ü–ï–†–ò–û–î...")
        print("   (–¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –≤—Ä–µ–º–µ...)")
        print(f"   üìä –û–±—â–æ –¥–Ω–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑: {len(daily_df) - 50}")

        # –û–±—Ö–æ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        with tqdm(total=len(daily_df) - 50, desc="üîÑ –ê–Ω–∞–ª–∏–∑ –Ω–∞ –¥–Ω–∏", unit="–¥–µ–Ω",
                  bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]') as pbar:

            for i in range(50, len(daily_df)):  # –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç 50-—Ç–∏ –¥–µ–Ω –∑–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—è
                current_daily = daily_df.iloc[:i+1]
                current_weekly = weekly_df[weekly_df.index <= daily_df.index[i]]

                if len(current_weekly) < 4:
                    pbar.update(1)
                    continue

                try:
                    signal = signal_generator.generate_signal(current_daily, current_weekly)

                    if signal:
                        signal_date = daily_df.index[i].date()

                        if signal['type'] == 'SHORT':
                            short_signals.append({
                                'date': signal_date,
                                'confidence': signal['confidence'],
                                'price': current_daily['Close'].iloc[-1],
                                'strength': signal.get('strength', 'N/A')
                            })
                        elif signal['type'] == 'LONG':
                            long_signals.append({
                                'date': signal_date,
                                'confidence': signal['confidence'],
                                'price': current_daily['Close'].iloc[-1]
                            })

                except Exception as e:
                    pass

                # –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
                pbar.update(1)

                # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –≤—Å–µ–∫–∏ 50 –¥–Ω–∏
                if (i - 49) % 50 == 0 and i > 50:
                    current_short_count = len(short_signals)
                    current_long_count = len(long_signals)
                    pbar.set_postfix({
                        'SHORT': current_short_count,
                        'LONG': current_long_count,
                        '–î–∞—Ç–∞': str(daily_df.index[i].date())
                    })

        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤—ä—Ä—à–µ–Ω!")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        print("\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò:")
        print(f"   üî¥ SHORT —Å–∏–≥–Ω–∞–ª–∏: {len(short_signals)}")
        print(f"   üü¢ LONG —Å–∏–≥–Ω–∞–ª–∏: {len(long_signals)}")

        if short_signals:
            print("\nüî¥ SHORT –°–ò–ì–ù–ê–õ–ò –ü–û–î–†–û–ë–ù–û:")
            print("   –î–∞—Ç–∞       | –¶–µ–Ω–∞     | –£–≤–µ—Ä–µ–Ω–æ—Å—Ç | –°–∏–ª–∞")
            print("   -----------|----------|-----------|-----")

            for signal in short_signals[:20]:  # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—Ç–µ 20
                print("12")

            if len(short_signals) > 20:
                print(f"   ... –∏ –æ—â–µ {len(short_signals) - 20} SHORT —Å–∏–≥–Ω–∞–ª–∞")

            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–∏–æ–¥–∏
            print("\nüìÖ SHORT –°–ò–ì–ù–ê–õ–ò –ü–û –ú–ï–°–ï–¶–ò:")
            monthly_shorts = {}
            for signal in short_signals:
                month_key = f"{signal['date'].year}-{signal['date'].month:02d}"
                monthly_shorts[month_key] = monthly_shorts.get(month_key, 0) + 1

            for month, count in sorted(monthly_shorts.items()):
                print(f"   {month}: {count} SHORT —Å–∏–≥–Ω–∞–ª–∞")

            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3 –º–µ—Å–µ—Ü–∞
            last_3_months = pd.Timestamp.now() - pd.DateOffset(months=3)
            recent_shorts = [s for s in short_signals if pd.Timestamp(s['date']) >= last_3_months]

            print("\nüìà –ê–ù–ê–õ–ò–ó –ù–ê –ü–û–°–õ–ï–î–ù–ò–¢–ï 3 –ú–ï–°–ï–¶–ê:")
            print(f"   üî¥ SHORT —Å–∏–≥–Ω–∞–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥–∞: {len(recent_shorts)}")
            print(f"   üìä –û–±—â–æ SHORT —Å–∏–≥–Ω–∞–ª–∏: {len(short_signals)}")

            if len(recent_shorts) == 0:
                print("   ‚úÖ –ü–û–¢–í–™–†–ñ–î–ï–ù–ò–ï: –ù–Ø–ú–ê SHORT —Å–∏–≥–Ω–∞–ª–∏ –≤ bull run –ø–µ—Ä–∏–æ–¥–∞!")
                print("   üí° –¢–æ–≤–∞ –µ –ø—Ä–∞–≤–∏–ª–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!")

            # –°—Ä–µ–¥–Ω–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç
            if short_signals:
                avg_confidence = np.mean([s['confidence'] for s in short_signals])
                print(".2f")
        else:
            print("   ‚ö†Ô∏è  –ù—è–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ SHORT —Å–∏–≥–Ω–∞–ª–∏ –≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å LONG —Å–∏–≥–Ω–∞–ª–∏
        if long_signals:
            recent_longs = [s for s in long_signals if pd.Timestamp(s['date']) >= last_3_months]
            print("\nüü¢ LONG –°–ò–ì–ù–ê–õ–ò –í –ü–û–°–õ–ï–î–ù–ò–¢–ï 3 –ú–ï–°–ï–¶–ê:")
            print(f"   üü¢ LONG —Å–∏–≥–Ω–∞–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥–∞: {len(recent_longs)}")

            if len(recent_longs) > 0:
                avg_long_confidence = np.mean([s['confidence'] for s in recent_longs])
                print(".2f")
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("   üî• –ê–Ω–∞–ª–∏–∑—ä—Ç –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞ –∫–∞—á–µ—Å—Ç–≤–æ—Ç–æ –Ω–∞ SHORT —Ñ–∏–ª—Ç—Ä–∏—Ç–µ!")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ –±–ª–æ–∫–∏—Ä–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏ –≤ bull run!")
        print("   üìä –ù–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏ –∫–æ–≥–∞—Ç–æ —É—Å–ª–æ–≤–∏—è—Ç–∞ –ø–æ–∑–≤–æ–ª—è–≤–∞—Ç!")
        print("   üí° –¢–æ–≤–∞ –µ –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞ –º–Ω–æ–≥–æ –¥–æ–±—Ä–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞!")

    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_historical_shorts()
