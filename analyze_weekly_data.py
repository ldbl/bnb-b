#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ —Å–µ–¥–º–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏
–ò–∑–≤–ª–∏—á–∞ —Å–µ–¥–º–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –∑–∞—â–æ SHORT —Å–∏–≥–Ω–∞–ª–∏—Ç–µ –Ω–µ —Å–µ —Ö–≤–∞—â–∞—Ç
–§–æ–∫—É—Å–∏—Ä–∞ —Å–µ –≤—ä—Ä—Ö—É –ì–û–†–ù–ò –æ–ø–∞—à–∫–∏ (>100% –æ—Ç —Ç—è–ª–æ—Ç–æ) –∫–∞—Ç–æ SHORT –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from data_fetcher import BNBDataFetcher
from weekly_tails import WeeklyTailsAnalyzer
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def analyze_weekly_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Å–µ–¥–º–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏"""

    print("üîç –ê–ù–ê–õ–ò–ó –ù–ê –°–ï–î–ú–ò–ß–ù–ò –î–ê–ù–ù–ò –ó–ê SHORT –°–ò–ì–ù–ê–õ–ò")
    print("=" * 60)

    # 1. –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏
    print("\nüìä –ò–∑–≤–ª–∏—á–∞–º–µ —Å–µ–¥–º–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏...")
    data_fetcher = BNBDataFetcher()
    data = data_fetcher.fetch_bnb_data(365)  # 1 –≥–æ–¥–∏–Ω–∞ –¥–∞–Ω–Ω–∏

    if not data or 'weekly' not in data:
        print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏!")
        return

    weekly_df = data['weekly']
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(weekly_df)} —Å–µ–¥–º–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∞")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {weekly_df.index[0].date()} –¥–æ {weekly_df.index[-1].date()}")
    print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ weekly_df: {list(weekly_df.columns)}")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    try:
        import toml
        with open('config.toml', 'r', encoding='utf-8') as f:
            config = toml.load(f)
        weekly_analyzer = WeeklyTailsAnalyzer(config)
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {e}")
        return

    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –≤—Å—è–∫–∞ —Å–µ–¥–º–∏—Ü–∞ –∑–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏
    print("\nüéØ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –≤—Å—è–∫–∞ —Å–µ–¥–º–∏—Ü–∞...")

    short_signals_found = []
    large_tails_short = []
    all_tails_data = []

    for i, (date, row) in enumerate(weekly_df.iterrows()):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –≤—Å—è–∫–∞ —Å–≤–µ—â –∑–∞ –æ–ø–∞—à–∫–∏
            open_price = row['Open']
            high_price = row['High']
            low_price = row['Low']
            close_price = row['Close']

            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –æ–ø–∞—à–∫–∏—Ç–µ –ü–†–ê–í–ò–õ–ù–û
            upper_wick = high_price - max(open_price, close_price)
            lower_wick = min(open_price, close_price) - low_price
            body = abs(close_price - open_price)
            total_range = high_price - low_price  # –û–±—â–∞ –≤–∏—Å–æ—á–∏–Ω–∞ –Ω–∞ —Å–≤–µ—â—Ç–∞

            # Debug: –ø–æ–∫–∞–∑–≤–∞–º–µ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –ø—ä—Ä–≤–∏—Ç–µ –Ω—è–∫–æ–ª–∫–æ
            if i < 3:
                print(".2f")

            tail_data = {
                'date': date.date(),
                'Open': open_price,
                'High': high_price,
                'Low': low_price,
                'Close': close_price,
                'body': body,
                'total_range': total_range,
                'upper_wick': upper_wick,
                'lower_wick': lower_wick,
                # –ü–†–ê–í–ò–õ–ù–û –ò–ó–ß–ò–°–õ–ï–ù–ò–ï: –ø—Ä–æ—Ü–µ–Ω—Ç —Å–ø—Ä—è–º–æ –æ–±—â–∞—Ç–∞ –≤–∏—Å–æ—á–∏–Ω–∞, –Ω–µ —Å–ø—Ä—è–º–æ —Ç—è–ª–æ—Ç–æ!
                'upper_wick_pct': (upper_wick / total_range * 100) if total_range > 0 else 0,
                'lower_wick_pct': (lower_wick / total_range * 100) if total_range > 0 else 0,
                'next_week_change': None
            }

            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–∞–∫–≤–æ —Å–µ —Å–ª—É—á–≤–∞ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
            if i < len(weekly_df) - 1:
                next_row = weekly_df.iloc[i + 1]
                next_close = next_row['Close']
                change_pct = ((next_close - close_price) / close_price) * 100
                tail_data['next_week_change'] = change_pct

            all_tails_data.append(tail_data)

            # –ê–∫–æ –≥–æ—Ä–Ω–∞—Ç–∞ –æ–ø–∞—à–∫–∞ –µ –≥–æ–ª—è–º–∞ (> 50% –æ—Ç –æ–±—â–∞—Ç–∞ –≤–∏—Å–æ—á–∏–Ω–∞) - SHORT –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
            if tail_data['upper_wick_pct'] > 50:
                large_tails_short.append(tail_data)
                print(".1f")

            # –ê–∫–æ –∏–º–∞ –≥–æ–ª—è–º–∞ –≥–æ—Ä–Ω–∞ –æ–ø–∞—à–∫–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –ø–æ–¥—Ä–æ–±–Ω–æ
            if tail_data['upper_wick_pct'] > 50:
                print(f"\n   üéØ –ì–û–õ–Ø–ú–ê –ì–û–†–ù–ê –û–ü–ê–®–ö–ê: {date.date()} - {tail_data['upper_wick_pct']:.1f}%")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ä—ä—á–Ω–æ —Å–≤–µ—â—Ç–∞
                is_bullish = close_price > open_price
                upper_tail = high_price - max(open_price, close_price)
                lower_tail = min(open_price, close_price) - low_price
                body_size = abs(close_price - open_price)

                print(f"   üïØÔ∏è  –°–í–ï–©: {'BULLISH' if is_bullish else 'BEARISH'} | Body: {body_size:.2f}")
                print(f"   üìä –û–ø–∞—à–∫–∏ - Upper: {upper_tail:.2f} | Lower: {lower_tail:.2f}")

                # –ö–∞–∫—ä–≤ —Å–∏–≥–Ω–∞–ª –æ—á–∞–∫–≤–∞–º–µ —Å–ø–æ—Ä–µ–¥ —Ä—ä—á–Ω–∏—è –∞–Ω–∞–ª–∏–∑
                expected_signal = 'SHORT' if not is_bullish and upper_tail > lower_tail else 'LONG' if is_bullish and lower_tail > upper_tail else 'HOLD'
                print(f"   üéØ –û–ß–ê–ö–í–ê–ù –°–ò–ì–ù–ê–õ: {expected_signal}")

                # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (—Å–∞–º–æ –∑–∞ —Å–≤–µ—â–∏ —Å –≥–æ–ª–µ–º–∏ –æ–ø–∞—à–∫–∏)
                try:
                    # –ü—ä—Ä–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –æ–ø–∞—à–∫–∏—Ç–µ, –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª
                    current_data = weekly_df.iloc[:i+1]
                    print(f"   üìä –ü–æ–¥–∞–≤–∞–º–µ {len(current_data)} —Å–µ–¥–º–∏—Ü–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")

                    # –°—Ç—ä–ø–∫–∞ 1: –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –æ–ø–∞—à–∫–∏—Ç–µ
                    tails_analysis = weekly_analyzer.analyze_weekly_tails(current_data)

                    if tails_analysis:
                        # –°—Ç—ä–ø–∫–∞ 2: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª –æ—Ç –∞–Ω–∞–ª–∏–∑–∞
                        signal = weekly_analyzer.get_weekly_tails_signal(tails_analysis)
                        if signal:
                            print(f"   üìä –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ò–ì–ù–ê–õ: {signal.get('signal', 'N/A')} (—Å–∏–ª–∞: {signal.get('strength', 0):.2f})")
                            print(f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {signal.get('reason', 'N/A')}")

                            if signal.get('signal') == 'SHORT':
                                short_signals_found.append({
                                    'date': date.date(),
                                    'signal': signal
                                })
                                print(f"   üî¥ –ù–ê–ú–ï–†–ï–ù SHORT –°–ò–ì–ù–ê–õ!")
                                print(f"   üìä SHORT —Å–∏–ª–∞: {signal.get('strength', 0):.3f}")
                                print(f"   üìù SHORT –ø—Ä–∏—á–∏–Ω–∞: {signal.get('reason', 'N/A')}")
                                print(f"   üî¢ SHORT –æ–ø–∞—à–∫–∏: {signal.get('tail_count', 0)}")
                    else:
                        print(f"   ‚ö™ –ù—è–º–∞ –∑–Ω–∞—á–∏–º–∏ –æ–ø–∞—à–∫–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑")

                except Exception as e:
                    print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
                    import traceback
                    print(f"   üîç –î–µ—Ç–∞–π–ª–∏: {traceback.format_exc()}")

            # –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ —Å–∏–≥–Ω–∞–ª —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–±–µ–∑ debug –∑–∞ –≤—Å–∏—á–∫–∏)
            try:
                current_data = weekly_df.iloc[:i+1]
                tails_analysis = weekly_analyzer.analyze_weekly_tails(current_data)
                if tails_analysis:
                    signal = weekly_analyzer.get_weekly_tails_signal(tails_analysis)
                    if signal and signal.get('signal') == 'SHORT':
                        short_signals_found.append({
                            'date': date.date(),
                            'signal': signal
                        })
            except:
                pass  # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä–∞–º–µ –≥—Ä–µ—à–∫–∏—Ç–µ –∑–∞ –¥–∞ –Ω–µ –∑–∞–º—ä—Ä—Å—è–≤–∞–º–µ –∏–∑—Ö–æ–¥–∞

        except Exception as e:
            print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –≤ —Å–µ–¥–º–∏—Ü–∞ {i+1}: {e}")
            continue

    # 4. –†–µ–∑—É–ª—Ç–∞—Ç–∏
    print("\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò:")
    print(f"üî¥ –ì–æ–ª–µ–º–∏ –≥–æ—Ä–Ω–∏ –æ–ø–∞—à–∫–∏ (>50%): {len(large_tails_short)}")
    print(f"‚ùå SHORT —Å–∏–≥–Ω–∞–ª–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {len(short_signals_found)}")
    print(f"üìà –û–±—â–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å–µ–¥–º–∏—Ü–∏: {len(all_tails_data)}")

    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ–ø–∞—à–∫–∏—Ç–µ
    if all_tails_data:
        lower_wicks = [d['lower_wick_pct'] for d in all_tails_data]
        upper_wicks = [d['upper_wick_pct'] for d in all_tails_data]

        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê –û–ü–ê–®–ö–ò–¢–ï:")
        print(f"   üîΩ –°—Ä–µ–¥–Ω–∞ –¥–æ–ª–Ω–∞ –æ–ø–∞—à–∫–∞: {np.mean(lower_wicks):.1f}%")
        print(f"   üîº –°—Ä–µ–¥–Ω–∞ –≥–æ—Ä–Ω–∞ –æ–ø–∞—à–∫–∞: {np.mean(upper_wicks):.1f}%")
        print(f"   üîΩ –ú–∞–∫—Å. –¥–æ–ª–Ω–∞ –æ–ø–∞—à–∫–∞: {max(lower_wicks):.1f}%")
        print(f"   üîº –ú–∞–∫—Å. –≥–æ—Ä–Ω–∞ –æ–ø–∞—à–∫–∞: {max(upper_wicks):.1f}%")

    # 6. –î–µ—Ç–∞–π–ª–∏ –∑–∞ –Ω–∞–π-–≥–æ–ª–µ–º–∏—Ç–µ –æ–ø–∞—à–∫–∏
    if large_tails_short:
        print("\nüéØ –ù–ê–ô-–ì–û–õ–ï–ú–ò –ì–û–†–ù–ò –û–ü–ê–®–ö–ò (>50%) - SHORT –ü–û–¢–ï–ù–¶–ò–ê–õ:")
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –≥–æ–ª–µ–º–∏–Ω–∞ –Ω–∞ –æ–ø–∞—à–∫–∞—Ç–∞
        sorted_tails = sorted(large_tails_short, key=lambda x: x['upper_wick_pct'], reverse=True)
        for tail in sorted_tails[:10]:  # –¢–æ–ø 10
            change_str = ".2f" if tail['next_week_change'] is not None else "N/A"
            print(f"üìÖ {tail['date']}: –≥–æ—Ä–Ω–∞ –æ–ø–∞—à–∫–∞ {tail['upper_wick_pct']:.1f}%, —Å–ª–µ–¥–≤–∞—â–∞ —Å–µ–¥–º–∏—Ü–∞: {change_str}")

    # 7. –ó–∞—â–æ –Ω—è–º–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏?
    print("\nüîç –ó–ê–©–û –ù–Ø–ú–ê SHORT –°–ò–ì–ù–ê–õ–ò?")
    print("üí° –í—ä–∑–º–æ–∂–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏:")

    if not large_tails_short:
        print("   ‚ùå –ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –≥–æ–ª–µ–º–∏ –≥–æ—Ä–Ω–∏ –æ–ø–∞—à–∫–∏ –≤ –¥–∞–Ω–Ω–∏—Ç–µ")
        print("   üí° –í –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –≥–æ–¥–∏–Ω–∞ BNB –µ –≤ —Å–∏–ª–µ–Ω –≤—ä–∑—Ö–æ–¥—è—â —Ç—Ä–µ–Ω–¥")
        print("   üí° –ü–æ—á—Ç–∏ –Ω—è–º–∞ —Å–µ–¥–º–∏—Ü–∏ —Å –≥–æ–ª–µ–º–∏ –≥–æ—Ä–Ω–∏ –æ–ø–∞—à–∫–∏ (—Å—ä–ø—Ä–æ—Ç–∏–≤–∞ –æ—Ç–≥–æ—Ä–µ)")
    else:
        print("   ‚úÖ –ò–º–∞ –≥–æ–ª–µ–º–∏ –≥–æ—Ä–Ω–∏ –æ–ø–∞—à–∫–∏, –Ω–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ä—Ç –Ω–µ –≥–∏ –∑–∞—Å–∏—á–∞")
        print("   üîß –í–µ—Ä–æ—è—Ç–Ω–æ weekly_tails.py –Ω–µ —Ç—ä—Ä—Å–∏ –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞ SHORT")

    # 8. –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ç—Ä–µ–Ω–¥–∞
    if all_tails_data:
        print("\nüìä –ê–ù–ê–õ–ò–ó –ù–ê –¢–†–ï–ù–î–ê:")
        weekly_changes = [d['next_week_change'] for d in all_tails_data if d['next_week_change'] is not None]
        if weekly_changes:
            positive_changes = sum(1 for c in weekly_changes if c > 0)
            print(f"   üìà –ü–æ–∑–∏—Ç–∏–≤–Ω–∏ —Å–µ–¥–º–∏—Ü–∏: {positive_changes}/{len(weekly_changes)} ({positive_changes/len(weekly_changes)*100:.1f}%)")
            print(f"   üí∞ –°—Ä–µ–¥–Ω–∞ —Å–µ–¥–º–∏—á–Ω–∞ –ø—Ä–æ–º—è–Ω–∞: {np.mean(weekly_changes):+.2f}%")
            print("   ‚úÖ BNB –µ –≤ –°–ò–õ–ï–ù –í–™–ó–•–û–î–Ø–© –¢–†–ï–ù–î - —Ç–æ–≤–∞ –æ–±—è—Å–Ω—è–≤–∞ –ª–∏–ø—Å–∞—Ç–∞ –Ω–∞ SHORT —Å–∏–≥–Ω–∞–ª–∏!")

    # 7. –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
    print("\n‚öôÔ∏è  –¢–ï–ö–£–©–ò –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê SHORT:")
    try:
        import toml
        with open('config.toml', 'r', encoding='utf-8') as f:
            config = toml.load(f)

        if 'short_signals' in config:
            short_config = config['short_signals']
            print(f"   üî¥ min_fibonacci_resistance: {short_config.get('min_fibonacci_resistance', 'N/A')}")
            print(f"   üî¥ volume_confirmation: {short_config.get('volume_confirmation', 'N/A')}")
            print(f"   üî¥ burn_filter: {short_config.get('burn_filter', 'N/A')}")

        if 'weekly_tails' in config:
            tails_config = config['weekly_tails']
            print(f"   üî¥ min_tail_strength: {tails_config.get('min_tail_strength', 'N/A')}")

    except Exception as e:
        print(f"   ‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ config: {e}")

    return large_tails_short, short_signals_found

if __name__ == "__main__":
    analyze_weekly_data()
