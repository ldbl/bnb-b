#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞ signal_generator.py —Å —É–ª—Ç—Ä–∞-—Å—Ç—Ä–∏–∫—Ç–Ω–∏ SHORT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
from data_fetcher import BNBDataFetcher
from signal_generator import SignalGenerator
import logging

# –ù–∞–º–∞–ª—è–≤–∞–º–µ logging
logging.getLogger().setLevel(logging.ERROR)

def test_signal_generator():
    """–¢–µ—Å—Ç–≤–∞ signal_generator —Å —É–ª—Ç—Ä–∞-—Å—Ç—Ä–∏–∫—Ç–Ω–∏ SHORT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""

    print("üîß –¢–ï–°–¢ –ù–ê SIGNAL GENERATOR –° –£–õ–¢–†–ê-–°–¢–†–ò–ö–¢–ù–ò SHORT –ù–ê–°–¢–†–û–ô–ö–ò")
    print("=" * 70)

    try:
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        import toml
        with open('config.toml', 'r', encoding='utf-8') as f:
            config = toml.load(f)

        print(f"üìä min_short_score = {config['signal_scoring']['min_short_score']}")

        # –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏
        data_fetcher = BNBDataFetcher()
        print("üìä –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏...")
        data = data_fetcher.fetch_bnb_data(90)

        if not data or 'daily' not in data or 'weekly' not in data:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏")
            return

        daily_df = data['daily']
        weekly_df = data['weekly']

        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(daily_df)} –¥–Ω–µ–≤–Ω–∏ –∏ {len(weekly_df)} —Å–µ–¥–º–∏—á–Ω–∏ –∑–∞–ø–∏—Å–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ signal generator
        signal_generator = SignalGenerator(config)
        print("‚úÖ Signal Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω")

        # –ë—Ä–æ–∏–º SHORT —Å–∏–≥–Ω–∞–ª–∏
        short_signals_count = 0
        total_signals = 0

        # –¢–µ—Å—Ç–≤–∞–º–µ –∑–∞ –≤—Å—è–∫–∞ —Å–µ–¥–º–∏—Ü–∞
        for i in range(10, len(weekly_df)):  # –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç 10-—Ç–∞ —Å–µ–¥–º–∏—Ü–∞ –∑–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—è
            try:
                current_date = weekly_df.index[i]
                current_weekly = weekly_df.iloc[:i+1]
                current_daily = daily_df[daily_df.index <= current_date]

                if len(current_daily) < 50 or len(current_weekly) < 8:
                    continue

                signal = signal_generator.generate_signal(current_daily, current_weekly)
                total_signals += 1

                if signal and signal.get('signal') == 'SHORT':
                    short_signals_count += 1
                    print(f"üî¥ SHORT #{short_signals_count} –Ω–∞ {current_date.date()}: —Å–∏–ª–∞ {signal.get('strength', 0):.3f}")

            except Exception as e:
                continue

        print("\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò:")
        print(f"   üî¥ SHORT —Å–∏–≥–Ω–∞–ª–∏: {short_signals_count}")
        print(f"   üìà –û–±—â–æ —Å–∏–≥–Ω–∞–ª–∏: {total_signals}")
        print(f"   üìä SHORT –ø—Ä–æ—Ü–µ–Ω—Ç: {short_signals_count/total_signals*100:.1f}%" if total_signals > 0 else "   üìä SHORT –ø—Ä–æ—Ü–µ–Ω—Ç: 0%")
        print(f"   üéØ SHORT accuracy –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {short_signals_count}/{total_signals} = {short_signals_count/total_signals*100:.1f}%" if total_signals > 0 else "   üéØ SHORT accuracy –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: 0/0 = 0%")

        if short_signals_count > 0:
            print("   ‚ö†Ô∏è  SHORT —Å–∏–≥–Ω–∞–ª–∏—Ç–µ –≤—Å–µ –æ—â–µ —Å–∞ –º–Ω–æ–≥–æ! –¢—Ä—è–±–≤–∞—Ç –æ—â–µ –ø–æ-—Å—Ç—Ä–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        else:
            print("   ‚úÖ –ù–£–õ–ê SHORT —Å–∏–≥–Ω–∞–ª–∏! –£—Å–ø–µ—Ö! üéâ")

    except Exception as e:
        print(f"‚ùå –ì–†–ï–®–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_signal_generator()
